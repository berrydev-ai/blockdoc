{"version":3,"file":"blockdoc.min.js","sources":["../src/core/block.js","../src/schema-loader.js","../src/utils/sanitize.js","../src/renderers/html.js","../src/renderers/markdown.js","../src/core/document.js","../src/index.js"],"sourcesContent":["/**\n * BlockDoc Block\n *\n * Represents a single content block within a BlockDoc document\n */\n\n// Define allowed block types\nconst ALLOWED_TYPES = [\n  \"text\",\n  \"heading\",\n  \"image\",\n  \"code\",\n  \"list\",\n  \"quote\",\n  \"embed\",\n  \"divider\",\n]\n\n// Define type-specific required properties\nconst TYPE_REQUIREMENTS = {\n  heading: [\"level\"],\n  code: [\"language\"],\n  image: [\"url\", \"alt\"],\n  list: [\"items\", \"listType\"],\n}\n\nexport class Block {\n  /**\n   * Create a new block\n   * @param {Object} data - Block data\n   * @param {string} data.id - Unique identifier\n   * @param {string} data.type - Block type\n   * @param {string} data.content - Block content\n   * @param {Object} [data.properties] - Additional type-specific properties\n   */\n  constructor(data) {\n    if (!data.id) {\n      throw new Error(\"Block ID is required\")\n    }\n\n    if (!data.type || !ALLOWED_TYPES.includes(data.type)) {\n      throw new Error(\n        `Invalid block type: ${\n          data.type\n        }. Allowed types are: ${ALLOWED_TYPES.join(\", \")}`\n      )\n    }\n\n    // Basic properties all blocks have\n    this.id = data.id\n    this.type = data.type\n    this.content = data.content || \"\"\n\n    // Check type-specific required properties\n    const requiredProps = TYPE_REQUIREMENTS[this.type] || []\n    for (const prop of requiredProps) {\n      if (data[prop] === undefined) {\n        throw new Error(\n          `Block of type \"${this.type}\" requires property \"${prop}\"`\n        )\n      }\n      this[prop] = data[prop]\n    }\n\n    // Copy any additional properties\n    Object.keys(data).forEach((key) => {\n      if (![\"id\", \"type\", \"content\"].includes(key) && this[key] === undefined) {\n        this[key] = data[key]\n      }\n    })\n  }\n\n  /**\n   * Update block properties\n   * @param {Object} updates - Properties to update\n   * @returns {Block} Updated block instance\n   */\n  update(updates) {\n    // Cannot change block type or ID\n    const { id, type, ...allowedUpdates } = updates\n\n    // Apply updates\n    Object.keys(allowedUpdates).forEach((key) => {\n      this[key] = allowedUpdates[key]\n    })\n\n    return this\n  }\n\n  /**\n   * Convert block to plain object\n   * @returns {Object} Block as plain object\n   */\n  toJSON() {\n    const result = {\n      id: this.id,\n      type: this.type,\n      content: this.content,\n    }\n\n    // Add type-specific properties\n    Object.keys(this).forEach((key) => {\n      if (![\"id\", \"type\", \"content\"].includes(key)) {\n        result[key] = this[key]\n      }\n    })\n\n    return result\n  }\n\n  /**\n   * Create common block types with simplified APIs\n   */\n\n  /**\n   * Create a text block\n   * @param {string} id - Block ID\n   * @param {string} content - Markdown content\n   * @returns {Block} New block instance\n   */\n  static text(id, content) {\n    return new Block({\n      id,\n      type: \"text\",\n      content,\n    })\n  }\n\n  /**\n   * Create a heading block\n   * @param {string} id - Block ID\n   * @param {number} level - Heading level (1-6)\n   * @param {string} content - Heading text\n   * @returns {Block} New block instance\n   */\n  static heading(id, level, content) {\n    return new Block({\n      id,\n      type: \"heading\",\n      level,\n      content,\n    })\n  }\n\n  /**\n   * Create an image block\n   * @param {string} id - Block ID\n   * @param {string} url - Image URL\n   * @param {string} alt - Alt text\n   * @param {string} [caption] - Optional caption\n   * @returns {Block} New block instance\n   */\n  static image(id, url, alt, caption) {\n    return new Block({\n      id,\n      type: \"image\",\n      content: \"\",\n      url,\n      alt,\n      ...(caption ? { caption } : {}),\n    })\n  }\n\n  /**\n   * Create a code block\n   * @param {string} id - Block ID\n   * @param {string} language - Programming language\n   * @param {string} content - Code content\n   * @returns {Block} New block instance\n   */\n  static code(id, language, content) {\n    return new Block({\n      id,\n      type: \"code\",\n      language,\n      content,\n    })\n  }\n\n  /**\n   * Create a list block\n   * @param {string} id - Block ID\n   * @param {Array<string>} items - List items\n   * @param {string} [listType='unordered'] - List type (ordered or unordered)\n   * @returns {Block} New block instance\n   */\n  static list(id, items, listType = \"unordered\") {\n    return new Block({\n      id,\n      type: \"list\",\n      content: \"\",\n      items,\n      listType,\n    })\n  }\n}\n","/**\n * BlockDoc Schema Loader\n * \n * Loads the JSON schema without requiring import assertions\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get current directory\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Load schema\nconst schemaPath = path.join(__dirname, 'schema/blockdoc.schema.json');\nconst schemaContent = fs.readFileSync(schemaPath, 'utf-8');\nexport const schema = JSON.parse(schemaContent);","/**\n * BlockDoc HTML Sanitization\n * \n * Provides utilities for sanitizing HTML content\n */\n\n/**\n * Simple HTML sanitizer to prevent XSS\n * @param {string} html - HTML content to sanitize\n * @returns {string} Sanitized HTML\n */\nexport function sanitizeHtml(html) {\n  if (!html) return '';\n  \n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n  };\n  \n  return String(html).replace(/[&<>\"']/g, function(m) { return map[m]; });\n}\n\n/**\n * Sanitize a URL for safe embedding\n * @param {string} url - URL to sanitize\n * @returns {string} Sanitized URL\n */\nexport function sanitizeUrl(url) {\n  if (!url) return '';\n  \n  // Only allow http and https protocols\n  if (url.match(/^https?:\\/\\//i)) {\n    return url;\n  } else if (url.startsWith('//')) {\n    return `https:${url}`;\n  } else if (!url.includes(':')) {\n    // Relative URLs are considered safe\n    return url;\n  }\n  \n  // Default to empty for potentially unsafe protocols\n  return '';\n}","/**\n * BlockDoc HTML Renderer\n *\n * Converts BlockDoc documents to HTML\n */\n\nimport { marked } from \"marked\"\nimport { sanitizeHtml } from \"../utils/sanitize.js\"\nimport hljs from \"highlight.js\"\n\n// Configure marked\nmarked.setOptions({\n  highlight: function (code, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      return hljs.highlight(code, { language: lang }).value\n    }\n    return hljs.highlightAuto(code).value\n  },\n  headerIds: true,\n  mangle: false,\n})\n\n/**\n * Render a BlockDoc document to HTML\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} HTML representation\n */\nexport function renderToHTML(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error(\"Invalid article structure\")\n  }\n\n  const html = [\n    `<article class=\"blockdoc-article\">`,\n    `<h1 class=\"blockdoc-title\">${sanitizeHtml(article.title)}</h1>`,\n  ]\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    html.push(renderBlock(block))\n  })\n\n  html.push(\"</article>\")\n\n  return html.join(\"\\n\")\n}\n\n/**\n * Render a single block to HTML\n * @param {Object} block - Block data\n * @returns {string} HTML representation of the block\n */\nfunction renderBlock(block) {\n  const { id, type } = block\n\n  // Wrapper with block ID and type as data attributes\n  const openWrapper = `<div class=\"blockdoc-block blockdoc-${type}\" data-block-id=\"${id}\" data-block-type=\"${type}\">`\n  const closeWrapper = `</div>`\n\n  let content\n\n  switch (type) {\n    case \"text\":\n      content = renderTextBlock(block)\n      break\n    case \"heading\":\n      content = renderHeadingBlock(block)\n      break\n    case \"image\":\n      content = renderImageBlock(block)\n      break\n    case \"code\":\n      content = renderCodeBlock(block)\n      break\n    case \"list\":\n      content = renderListBlock(block)\n      break\n    case \"quote\":\n      content = renderQuoteBlock(block)\n      break\n    case \"embed\":\n      content = renderEmbedBlock(block)\n      break\n    case \"divider\":\n      content = renderDividerBlock()\n      break\n    default:\n      content = `<p>Unknown block type: ${type}</p>`\n  }\n\n  return `${openWrapper}${content}${closeWrapper}`\n}\n\n/**\n * Render a text block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderTextBlock(block) {\n  // Use marked to convert markdown to HTML\n  return marked.parse(block.content)\n}\n\n/**\n * Render a heading block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderHeadingBlock(block) {\n  const { level, content } = block\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6)\n\n  return `<h${validLevel}>${sanitizeHtml(content)}</h${validLevel}>`\n}\n\n/**\n * Render an image block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderImageBlock(block) {\n  const { url, alt, caption } = block\n\n  let html = `<img src=\"${sanitizeHtml(url)}\" alt=\"${sanitizeHtml(\n    alt\n  )}\" class=\"blockdoc-image\" />`\n\n  if (caption) {\n    html += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`\n    return `<figure class=\"blockdoc-figure\">${html}</figure>`\n  }\n\n  return html\n}\n\n/**\n * Render a code block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderCodeBlock(block) {\n  const { language, content } = block\n\n  // Use highlight.js for syntax highlighting\n  let highlightedCode\n\n  try {\n    if (language && hljs.getLanguage(language)) {\n      highlightedCode = hljs.highlight(content, { language }).value\n    } else {\n      highlightedCode = hljs.highlightAuto(content).value\n    }\n  } catch (e) {\n    highlightedCode = sanitizeHtml(content)\n  }\n\n  return `\n    <pre class=\"blockdoc-pre\">\n      <code class=\"blockdoc-code ${\n        language ? `language-${language}` : \"\"\n      }\">${highlightedCode}</code>\n    </pre>\n  `\n}\n\n/**\n * Render a list block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderListBlock(block) {\n  const { items, listType } = block\n\n  if (!items || !Array.isArray(items)) {\n    return \"<p>Invalid list items</p>\"\n  }\n\n  const tag = listType === \"ordered\" ? \"ol\" : \"ul\"\n\n  const itemsHtml = items\n    .map((item) => `<li>${marked.parse(item)}</li>`)\n    .join(\"\")\n\n  return `<${tag} class=\"blockdoc-list blockdoc-list-${listType}\">${itemsHtml}</${tag}>`\n}\n\n/**\n * Render a quote block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderQuoteBlock(block) {\n  const { content, attribution } = block\n\n  let html = `<blockquote class=\"blockdoc-quote\">${marked.parse(\n    content\n  )}</blockquote>`\n\n  if (attribution) {\n    html += `<cite class=\"blockdoc-attribution\">${sanitizeHtml(\n      attribution\n    )}</cite>`\n  }\n\n  return html\n}\n\n/**\n * Render an embed block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderEmbedBlock(block) {\n  const { url, caption, embedType } = block\n\n  let embedHtml\n\n  if (embedType === \"youtube\") {\n    // Extract YouTube video ID\n    const videoId = extractYouTubeId(url)\n    if (videoId) {\n      embedHtml = `\n        <div class=\"blockdoc-embed-container\">\n          <iframe \n            width=\"560\" \n            height=\"315\" \n            src=\"https://www.youtube.com/embed/${videoId}\" \n            frameborder=\"0\" \n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n            allowfullscreen>\n          </iframe>\n        </div>\n      `\n    } else {\n      embedHtml = `<p>Invalid YouTube URL</p>`\n    }\n  } else if (embedType === \"twitter\") {\n    embedHtml = `\n      <div class=\"blockdoc-embed blockdoc-twitter\">\n        <blockquote class=\"twitter-tweet\">\n          <a href=\"${sanitizeHtml(url)}\"></a>\n        </blockquote>\n        <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n      </div>\n    `\n  } else {\n    // Generic embed with iframe\n    embedHtml = `\n      <div class=\"blockdoc-embed\">\n        <iframe \n          src=\"${sanitizeHtml(url)}\" \n          frameborder=\"0\" \n          width=\"100%\" \n          height=\"400\"\n          allowfullscreen>\n        </iframe>\n      </div>\n    `\n  }\n\n  if (caption) {\n    embedHtml += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`\n    return `<figure class=\"blockdoc-figure\">${embedHtml}</figure>`\n  }\n\n  return embedHtml\n}\n\n/**\n * Render a divider block\n * @returns {string} HTML representation\n */\nfunction renderDividerBlock() {\n  return `<hr class=\"blockdoc-divider\" />`\n}\n\n/**\n * Extract YouTube video ID from URL\n * @param {string} url - YouTube URL\n * @returns {string|null} YouTube video ID or null if invalid\n */\nfunction extractYouTubeId(url) {\n  try {\n    const parsedUrl = new URL(url)\n\n    // Handle youtu.be format\n    if (parsedUrl.hostname === \"youtu.be\") {\n      return parsedUrl.pathname.slice(1)\n    }\n\n    // Handle youtube.com format\n    if (\n      parsedUrl.hostname === \"www.youtube.com\" ||\n      parsedUrl.hostname === \"youtube.com\"\n    ) {\n      const params = new URLSearchParams(parsedUrl.search)\n      return params.get(\"v\")\n    }\n\n    return null\n  } catch (e) {\n    return null\n  }\n}\n","/**\n * BlockDoc Markdown Renderer\n *\n * Converts BlockDoc documents to Markdown\n */\n\n/**\n * Render a BlockDoc document to Markdown\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} Markdown representation\n */\nexport function renderToMarkdown(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error(\"Invalid article structure\");\n  }\n\n  const markdown = [\n    `# ${article.title}`,\n    ''\n  ];\n\n  // Add metadata if present\n  if (article.metadata) {\n    if (article.metadata.author) {\n      markdown.push(`> Author: ${article.metadata.author}`);\n    }\n    \n    if (article.metadata.publishedDate) {\n      const date = new Date(article.metadata.publishedDate);\n      markdown.push(`> Published: ${date.toDateString()}`);\n    }\n    \n    if (article.metadata.tags && Array.isArray(article.metadata.tags) && article.metadata.tags.length > 0) {\n      markdown.push(`> Tags: ${article.metadata.tags.join(', ')}`);\n    }\n    \n    markdown.push('');\n  }\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    markdown.push(renderBlockToMarkdown(block));\n    markdown.push(''); // Add a blank line after each block\n  });\n\n  return markdown.join('\\n');\n}\n\n/**\n * Render a single block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation of the block\n */\nfunction renderBlockToMarkdown(block) {\n  const { type } = block;\n\n  switch (type) {\n    case \"text\":\n      return renderTextBlockToMarkdown(block);\n    case \"heading\":\n      return renderHeadingBlockToMarkdown(block);\n    case \"image\":\n      return renderImageBlockToMarkdown(block);\n    case \"code\":\n      return renderCodeBlockToMarkdown(block);\n    case \"list\":\n      return renderListBlockToMarkdown(block);\n    case \"quote\":\n      return renderQuoteBlockToMarkdown(block);\n    case \"embed\":\n      return renderEmbedBlockToMarkdown(block);\n    case \"divider\":\n      return \"---\";\n    default:\n      return `[Unknown block type: ${type}]`;\n  }\n}\n\n/**\n * Render a text block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderTextBlockToMarkdown(block) {\n  // Text content is already in markdown format\n  return block.content;\n}\n\n/**\n * Render a heading block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderHeadingBlockToMarkdown(block) {\n  const { level, content } = block;\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6);\n  const hashtags = '#'.repeat(validLevel);\n  \n  return `${hashtags} ${content}`;\n}\n\n/**\n * Render an image block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderImageBlockToMarkdown(block) {\n  const { url, alt, caption } = block;\n  \n  let markdown = `![${alt || ''}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render a code block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderCodeBlockToMarkdown(block) {\n  const { language, content } = block;\n  \n  return \"```\" + (language || '') + \"\\n\" + content + \"\\n```\";\n}\n\n/**\n * Render a list block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderListBlockToMarkdown(block) {\n  const { items, listType } = block;\n  \n  if (!items || !Array.isArray(items)) {\n    return \"[Invalid list items]\";\n  }\n  \n  return items.map((item, index) => {\n    if (listType === \"ordered\") {\n      return `${index + 1}. ${item}`;\n    } else {\n      return `- ${item}`;\n    }\n  }).join('\\n');\n}\n\n/**\n * Render a quote block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderQuoteBlockToMarkdown(block) {\n  const { content, attribution } = block;\n  \n  let markdown = content.split('\\n').map(line => `> ${line}`).join('\\n');\n  \n  if (attribution) {\n    markdown += `\\n>\\n> \u0014 ${attribution}`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render an embed block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderEmbedBlockToMarkdown(block) {\n  const { url, caption, embedType } = block;\n  \n  let markdown = `[${embedType || 'Embedded content'}: ${url}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}","/**\n * BlockDoc Document\n *\n * Core class for creating, manipulating and rendering BlockDoc documents\n */\n\nimport Ajv from \"ajv\"\nimport addFormats from \"ajv-formats\"\nimport { schema } from \"../schema-loader.js\"\nimport { renderToHTML } from \"../renderers/html.js\"\nimport { renderToMarkdown } from \"../renderers/markdown.js\"\nimport { Block } from \"./block.js\"\n\nexport class BlockDocDocument {\n  /**\n   * Create a new BlockDoc document\n   * @param {Object} options - Document initialization options\n   * @param {string} options.title - Document title\n   * @param {Object} [options.metadata] - Optional document metadata\n   * @param {Array<Object>} [options.blocks] - Initial blocks to add\n   */\n  constructor({ title, metadata = {}, blocks = [] }) {\n    this.article = {\n      title,\n      metadata,\n      blocks: [],\n    }\n\n    // Add initial blocks if provided\n    if (blocks && Array.isArray(blocks)) {\n      blocks.forEach((block) => this.addBlock(block))\n    }\n  }\n\n  /**\n   * Validate the document against the BlockDoc schema\n   * @returns {boolean} True if valid\n   * @throws {Error} If validation fails\n   */\n  validate() {\n    const ajv = new Ajv()\n    addFormats(ajv)\n    const validate = ajv.compile(schema)\n    const valid = validate({ article: this.article })\n\n    if (!valid) {\n      const errors = validate.errors\n      throw new Error(`Invalid BlockDoc document: ${JSON.stringify(errors)}`)\n    }\n\n    return true\n  }\n\n  /**\n   * Add a block to the document\n   * @param {Object} blockData - Block data\n   * @returns {Block} The created block\n   */\n  addBlock(blockData) {\n    // Check if ID already exists\n    if (this.getBlock(blockData.id)) {\n      throw new Error(`Block with ID \"${blockData.id}\" already exists`)\n    }\n\n    const block = new Block(blockData)\n    this.article.blocks.push(block.toJSON())\n    return block\n  }\n\n  /**\n   * Insert a block at a specific position\n   * @param {Object} blockData - Block data\n   * @param {number} position - Position to insert at\n   * @returns {Block} The created block\n   */\n  insertBlock(blockData, position) {\n    // Check if ID already exists\n    if (this.getBlock(blockData.id)) {\n      throw new Error(`Block with ID \"${blockData.id}\" already exists`)\n    }\n\n    const block = new Block(blockData)\n    this.article.blocks.splice(position, 0, block.toJSON())\n    return block\n  }\n\n  /**\n   * Get a block by ID\n   * @param {string} id - Block ID\n   * @returns {Object|null} The block or null if not found\n   */\n  getBlock(id) {\n    return this.article.blocks.find((block) => block.id === id) || null\n  }\n\n  /**\n   * Update a block by ID\n   * @param {string} id - Block ID\n   * @param {Object} updates - Properties to update\n   * @returns {Object} The updated block\n   */\n  updateBlock(id, updates) {\n    const index = this.article.blocks.findIndex((block) => block.id === id)\n\n    if (index === -1) {\n      throw new Error(`Block with ID \"${id}\" not found`)\n    }\n\n    // Create a new block with the updates\n    const currentBlock = this.article.blocks[index]\n    const updatedBlock = { ...currentBlock, ...updates }\n\n    // Validate the updated block\n    const block = new Block(updatedBlock)\n\n    // Update the block in the document\n    this.article.blocks[index] = block.toJSON()\n\n    return this.article.blocks[index]\n  }\n\n  /**\n   * Remove a block by ID\n   * @param {string} id - Block ID\n   * @returns {boolean} True if removed\n   */\n  removeBlock(id) {\n    const index = this.article.blocks.findIndex((block) => block.id === id)\n\n    if (index === -1) {\n      return false\n    }\n\n    this.article.blocks.splice(index, 1)\n    return true\n  }\n\n  /**\n   * Move a block to a new position\n   * @param {string} id - Block ID\n   * @param {number} newPosition - New position\n   * @returns {boolean} True if moved\n   */\n  moveBlock(id, newPosition) {\n    const index = this.article.blocks.findIndex((block) => block.id === id)\n\n    if (index === -1) {\n      return false\n    }\n\n    if (newPosition < 0 || newPosition >= this.article.blocks.length) {\n      throw new Error(`Invalid position: ${newPosition}`)\n    }\n\n    // Remove the block from its current position\n    const [block] = this.article.blocks.splice(index, 1)\n\n    // Insert it at the new position\n    this.article.blocks.splice(newPosition, 0, block)\n\n    return true\n  }\n\n  /**\n   * Render the document to HTML\n   * @returns {string} HTML representation\n   */\n  renderToHTML() {\n    return renderToHTML(this.article)\n  }\n\n  /**\n   * Render the document to Markdown\n   * @returns {string} Markdown representation\n   */\n  renderToMarkdown() {\n    return renderToMarkdown(this.article)\n  }\n\n  /**\n   * Export the document as a JSON object\n   * @returns {Object} Document as JSON object\n   */\n  toJSON() {\n    return { article: this.article }\n  }\n\n  /**\n   * Export the document as a JSON string\n   * @returns {string} Document as JSON string\n   */\n  toString() {\n    return JSON.stringify(this.toJSON(), null, 2)\n  }\n\n  /**\n   * Create a BlockDoc document from a JSON object\n   * @param {Object|string} json - JSON object or string\n   * @returns {BlockDocDocument} New document instance\n   */\n  static fromJSON(json) {\n    const data = typeof json === \"string\" ? JSON.parse(json) : json\n\n    if (!data.article) {\n      throw new Error(\"Invalid BlockDoc document: missing article property\")\n    }\n\n    return new BlockDocDocument({\n      title: data.article.title,\n      metadata: data.article.metadata || {},\n      blocks: data.article.blocks || [],\n    })\n  }\n}\n","/**\n * BlockDoc\n * \n * Main entry point for the BlockDoc library\n */\n\n// Core classes\nexport { Block } from './core/block.js';\nexport { BlockDocDocument } from './core/document.js';\n\n// Renderers\nexport { renderToHTML } from './renderers/html.js';\nexport { renderToMarkdown } from './renderers/markdown.js';\n\n// Schema\nimport { schema } from './schema-loader.js';\nexport { schema };\n\n// Version\nexport const version = '1.0.0';"],"names":["ALLOWED_TYPES","TYPE_REQUIREMENTS","heading","code","image","list","Block","constructor","data","id","Error","type","includes","join","this","content","requiredProps","prop","undefined","Object","keys","forEach","key","update","updates","allowedUpdates","toJSON","result","text","level","url","alt","caption","language","items","listType","arguments","length","__dirname","path","dirname","fileURLToPath","document","location","require","pathToFileURL","__filename","href","_documentCurrentScript","tagName","toUpperCase","src","URL","baseURI","schemaPath","schemaContent","fs","readFileSync","schema","JSON","parse","sanitizeHtml","html","map","String","replace","m","renderToHTML","article","blocks","Array","isArray","title","block","push","openWrapper","closeWrapper","marked","renderTextBlock","validLevel","Math","min","max","parseInt","renderHeadingBlock","renderImageBlock","highlightedCode","hljs","getLanguage","highlight","value","highlightAuto","e","renderCodeBlock","tag","itemsHtml","item","renderListBlock","attribution","renderQuoteBlock","embedType","embedHtml","videoId","parsedUrl","hostname","pathname","slice","URLSearchParams","search","get","extractYouTubeId","renderEmbedBlock","renderBlock","renderToMarkdown","markdown","metadata","author","publishedDate","date","Date","toDateString","tags","renderTextBlockToMarkdown","repeat","renderHeadingBlockToMarkdown","renderImageBlockToMarkdown","renderCodeBlockToMarkdown","index","renderListBlockToMarkdown","split","line","renderQuoteBlockToMarkdown","renderEmbedBlockToMarkdown","renderBlockToMarkdown","setOptions","lang","headerIds","mangle","BlockDocDocument","_ref","addBlock","validate","ajv","Ajv","addFormats","compile","errors","stringify","blockData","getBlock","insertBlock","position","splice","find","updateBlock","findIndex","updatedBlock","removeBlock","moveBlock","newPosition","toString","fromJSON","json"],"mappings":"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"}