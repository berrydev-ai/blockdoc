{"version":3,"file":"markdown.js","sources":["../../../src/renderers/markdown.js"],"sourcesContent":["/**\n * BlockDoc Markdown Renderer\n *\n * Converts BlockDoc documents to Markdown\n */\n\n/**\n * Render a BlockDoc document to Markdown\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} Markdown representation\n */\nexport function renderToMarkdown(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error('Invalid article structure');\n  }\n\n  const markdown = [\n    `# ${article.title}`,\n    ''\n  ];\n\n  // Add metadata if present\n  if (article.metadata) {\n    if (article.metadata.author) {\n      markdown.push(`> Author: ${article.metadata.author}`);\n    }\n    \n    if (article.metadata.publishedDate) {\n      const date = new Date(article.metadata.publishedDate);\n      markdown.push(`> Published: ${date.toDateString()}`);\n    }\n    \n    if (article.metadata.tags && Array.isArray(article.metadata.tags) && article.metadata.tags.length > 0) {\n      markdown.push(`> Tags: ${article.metadata.tags.join(', ')}`);\n    }\n    \n    markdown.push('');\n  }\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    markdown.push(renderBlockToMarkdown(block));\n    markdown.push(''); // Add a blank line after each block\n  });\n\n  return markdown.join('\\n');\n}\n\n/**\n * Render a single block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation of the block\n */\nfunction renderBlockToMarkdown(block) {\n  const { type } = block;\n\n  switch (type) {\n  case 'text':\n    return renderTextBlockToMarkdown(block);\n  case 'heading':\n    return renderHeadingBlockToMarkdown(block);\n  case 'image':\n    return renderImageBlockToMarkdown(block);\n  case 'code':\n    return renderCodeBlockToMarkdown(block);\n  case 'list':\n    return renderListBlockToMarkdown(block);\n  case 'quote':\n    return renderQuoteBlockToMarkdown(block);\n  case 'embed':\n    return renderEmbedBlockToMarkdown(block);\n  case 'divider':\n    return '---';\n  default:\n    return `[Unknown block type: ${type}]`;\n  }\n}\n\n/**\n * Render a text block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderTextBlockToMarkdown(block) {\n  // Text content is already in markdown format\n  return block.content;\n}\n\n/**\n * Render a heading block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderHeadingBlockToMarkdown(block) {\n  const { level, content } = block;\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6);\n  const hashtags = '#'.repeat(validLevel);\n  \n  return `${hashtags} ${content}`;\n}\n\n/**\n * Render an image block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderImageBlockToMarkdown(block) {\n  const { url, alt, caption } = block;\n  \n  let markdown = `![${alt || ''}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render a code block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderCodeBlockToMarkdown(block) {\n  const { language, content } = block;\n  \n  return '```' + (language || '') + '\\n' + content + '\\n```';\n}\n\n/**\n * Render a list block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderListBlockToMarkdown(block) {\n  const { items, listType } = block;\n  \n  if (!items || !Array.isArray(items)) {\n    return '[Invalid list items]';\n  }\n  \n  return items.map((item, index) => {\n    if (listType === 'ordered') {\n      return `${index + 1}. ${item}`;\n    } else {\n      return `- ${item}`;\n    }\n  }).join('\\n');\n}\n\n/**\n * Render a quote block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderQuoteBlockToMarkdown(block) {\n  const { content, attribution } = block;\n  \n  let markdown = content.split('\\n').map(line => `> ${line}`).join('\\n');\n  \n  if (attribution) {\n    markdown += `\\n>\\n> \u0014 ${attribution}`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render an embed block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderEmbedBlockToMarkdown(block) {\n  const { url, caption, embedType } = block;\n  \n  let markdown = `[${embedType || 'Embedded content'}: ${url}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}"],"names":["renderToMarkdown","article","blocks","Array","isArray","Error","markdown","title","metadata","author","push","publishedDate","date","Date","toDateString","tags","length","join","forEach","block","renderBlockToMarkdown","type","renderTextBlockToMarkdown","renderHeadingBlockToMarkdown","renderImageBlockToMarkdown","renderCodeBlockToMarkdown","renderListBlockToMarkdown","renderQuoteBlockToMarkdown","renderEmbedBlockToMarkdown","content","level","validLevel","Math","min","max","parseInt","hashtags","repeat","url","alt","caption","language","items","listType","map","item","index","attribution","split","line","embedType"],"mappings":"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"}