{"version":3,"file":"block.js","sources":["../../../src/core/block.js"],"sourcesContent":["/**\n * BlockDoc Block\n *\n * Represents a single content block within a BlockDoc document\n */\n\n// Define allowed block types\nconst ALLOWED_TYPES = [\n  \"text\",\n  \"heading\",\n  \"image\",\n  \"code\",\n  \"list\",\n  \"quote\",\n  \"embed\",\n  \"divider\",\n]\n\n// Define type-specific required properties\nconst TYPE_REQUIREMENTS = {\n  heading: [\"level\"],\n  code: [\"language\"],\n  image: [\"url\", \"alt\"],\n  list: [\"items\", \"listType\"],\n}\n\nexport class Block {\n  /**\n   * Create a new block\n   * @param {Object} data - Block data\n   * @param {string} data.id - Unique identifier\n   * @param {string} data.type - Block type\n   * @param {string} data.content - Block content\n   * @param {Object} [data.properties] - Additional type-specific properties\n   */\n  constructor(data) {\n    if (!data.id) {\n      throw new Error(\"Block ID is required\")\n    }\n\n    if (!data.type || !ALLOWED_TYPES.includes(data.type)) {\n      throw new Error(\n        `Invalid block type: ${\n          data.type\n        }. Allowed types are: ${ALLOWED_TYPES.join(\", \")}`\n      )\n    }\n\n    // Basic properties all blocks have\n    this.id = data.id\n    this.type = data.type\n    this.content = data.content || \"\"\n\n    // Check type-specific required properties\n    const requiredProps = TYPE_REQUIREMENTS[this.type] || []\n    for (const prop of requiredProps) {\n      if (data[prop] === undefined) {\n        throw new Error(\n          `Block of type \"${this.type}\" requires property \"${prop}\"`\n        )\n      }\n      this[prop] = data[prop]\n    }\n\n    // Copy any additional properties\n    Object.keys(data).forEach((key) => {\n      if (![\"id\", \"type\", \"content\"].includes(key) && this[key] === undefined) {\n        this[key] = data[key]\n      }\n    })\n  }\n\n  /**\n   * Update block properties\n   * @param {Object} updates - Properties to update\n   * @returns {Block} Updated block instance\n   */\n  update(updates) {\n    // Cannot change block type or ID\n    const { id, type, ...allowedUpdates } = updates\n\n    // Apply updates\n    Object.keys(allowedUpdates).forEach((key) => {\n      this[key] = allowedUpdates[key]\n    })\n\n    return this\n  }\n\n  /**\n   * Convert block to plain object\n   * @returns {Object} Block as plain object\n   */\n  toJSON() {\n    const result = {\n      id: this.id,\n      type: this.type,\n      content: this.content,\n    }\n\n    // Add type-specific properties\n    Object.keys(this).forEach((key) => {\n      if (![\"id\", \"type\", \"content\"].includes(key)) {\n        result[key] = this[key]\n      }\n    })\n\n    return result\n  }\n\n  /**\n   * Create common block types with simplified APIs\n   */\n\n  /**\n   * Create a text block\n   * @param {string} id - Block ID\n   * @param {string} content - Markdown content\n   * @returns {Block} New block instance\n   */\n  static text(id, content) {\n    return new Block({\n      id,\n      type: \"text\",\n      content,\n    })\n  }\n\n  /**\n   * Create a heading block\n   * @param {string} id - Block ID\n   * @param {number} level - Heading level (1-6)\n   * @param {string} content - Heading text\n   * @returns {Block} New block instance\n   */\n  static heading(id, level, content) {\n    return new Block({\n      id,\n      type: \"heading\",\n      level,\n      content,\n    })\n  }\n\n  /**\n   * Create an image block\n   * @param {string} id - Block ID\n   * @param {string} url - Image URL\n   * @param {string} alt - Alt text\n   * @param {string} [caption] - Optional caption\n   * @returns {Block} New block instance\n   */\n  static image(id, url, alt, caption) {\n    return new Block({\n      id,\n      type: \"image\",\n      content: \"\",\n      url,\n      alt,\n      ...(caption ? { caption } : {}),\n    })\n  }\n\n  /**\n   * Create a code block\n   * @param {string} id - Block ID\n   * @param {string} language - Programming language\n   * @param {string} content - Code content\n   * @returns {Block} New block instance\n   */\n  static code(id, language, content) {\n    return new Block({\n      id,\n      type: \"code\",\n      language,\n      content,\n    })\n  }\n\n  /**\n   * Create a list block\n   * @param {string} id - Block ID\n   * @param {Array<string>} items - List items\n   * @param {string} [listType='unordered'] - List type (ordered or unordered)\n   * @returns {Block} New block instance\n   */\n  static list(id, items, listType = \"unordered\") {\n    return new Block({\n      id,\n      type: \"list\",\n      content: \"\",\n      items,\n      listType,\n    })\n  }\n}\n"],"names":["ALLOWED_TYPES","TYPE_REQUIREMENTS","heading","code","image","list","Block","constructor","data","id","Error","type","includes","join","content","requiredProps","prop","undefined","Object","keys","forEach","key","update","updates","allowedUpdates","toJSON","result","text","level","url","alt","caption","language","items","listType"],"mappings":"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"}