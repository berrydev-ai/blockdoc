{"version":3,"file":"document.js","sources":["../../../src/schema-loader.js","../../../src/utils/sanitize.js","../../../src/renderers/html.js","../../../src/renderers/markdown.js","../../../src/core/block.js","../../../src/core/document.js"],"sourcesContent":["/**\n * BlockDoc Schema Loader\n * \n * Loads the JSON schema without requiring import assertions\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get current directory\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Load schema\nconst schemaPath = path.join(__dirname, 'schema/blockdoc.schema.json');\nconst schemaContent = fs.readFileSync(schemaPath, 'utf-8');\nexport const schema = JSON.parse(schemaContent);","/**\n * BlockDoc HTML Sanitization\n * \n * Provides utilities for sanitizing HTML content\n */\n\n/**\n * Simple HTML sanitizer to prevent XSS\n * @param {string} html - HTML content to sanitize\n * @returns {string} Sanitized HTML\n */\nexport function sanitizeHtml(html) {\n  if (!html) return '';\n  \n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#039;'\n  };\n  \n  return String(html).replace(/[&<>\"']/g, function(m) { return map[m]; });\n}\n\n/**\n * Sanitize a URL for safe embedding\n * @param {string} url - URL to sanitize\n * @returns {string} Sanitized URL\n */\nexport function sanitizeUrl(url) {\n  if (!url) return '';\n  \n  // Only allow http and https protocols\n  if (url.match(/^https?:\\/\\//i)) {\n    return url;\n  } else if (url.startsWith('//')) {\n    return `https:${url}`;\n  } else if (!url.includes(':')) {\n    // Relative URLs are considered safe\n    return url;\n  }\n  \n  // Default to empty for potentially unsafe protocols\n  return '';\n}","/**\n * BlockDoc HTML Renderer\n *\n * Converts BlockDoc documents to HTML\n */\n\nimport { marked } from 'marked';\nimport { sanitizeHtml } from '../utils/sanitize.js';\nimport hljs from 'highlight.js';\n\n// Configure marked\nmarked.setOptions({\n  highlight: function (code, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      return hljs.highlight(code, { language: lang }).value;\n    }\n    return hljs.highlightAuto(code).value;\n  },\n  headerIds: true,\n  mangle: false,\n});\n\n/**\n * Render a BlockDoc document to HTML\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} HTML representation\n */\nexport function renderToHTML(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error('Invalid article structure');\n  }\n\n  const html = [\n    '<article class=\"blockdoc-article\">',\n    `<h1 class=\"blockdoc-title\">${sanitizeHtml(article.title)}</h1>`,\n  ];\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    html.push(renderBlock(block));\n  });\n\n  html.push('</article>');\n\n  return html.join('\\n');\n}\n\n/**\n * Render a single block to HTML\n * @param {Object} block - Block data\n * @returns {string} HTML representation of the block\n */\nfunction renderBlock(block) {\n  const { id, type } = block;\n\n  // Wrapper with block ID and type as data attributes\n  const openWrapper = `<div class=\"blockdoc-block blockdoc-${type}\" data-block-id=\"${id}\" data-block-type=\"${type}\">`;\n  const closeWrapper = '</div>';\n\n  let content;\n\n  switch (type) {\n  case 'text':\n    content = renderTextBlock(block);\n    break;\n  case 'heading':\n    content = renderHeadingBlock(block);\n    break;\n  case 'image':\n    content = renderImageBlock(block);\n    break;\n  case 'code':\n    content = renderCodeBlock(block);\n    break;\n  case 'list':\n    content = renderListBlock(block);\n    break;\n  case 'quote':\n    content = renderQuoteBlock(block);\n    break;\n  case 'embed':\n    content = renderEmbedBlock(block);\n    break;\n  case 'divider':\n    content = renderDividerBlock();\n    break;\n  default:\n    content = `<p>Unknown block type: ${type}</p>`;\n  }\n\n  return `${openWrapper}${content}${closeWrapper}`;\n}\n\n/**\n * Render a text block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderTextBlock(block) {\n  // Use marked to convert markdown to HTML\n  return marked.parse(block.content);\n}\n\n/**\n * Render a heading block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderHeadingBlock(block) {\n  const { level, content } = block;\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6);\n\n  return `<h${validLevel}>${sanitizeHtml(content)}</h${validLevel}>`;\n}\n\n/**\n * Render an image block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderImageBlock(block) {\n  const { url, alt, caption } = block;\n\n  let html = `<img src=\"${sanitizeHtml(url)}\" alt=\"${sanitizeHtml(\n    alt\n  )}\" class=\"blockdoc-image\" />`;\n\n  if (caption) {\n    html += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`;\n    return `<figure class=\"blockdoc-figure\">${html}</figure>`;\n  }\n\n  return html;\n}\n\n/**\n * Render a code block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderCodeBlock(block) {\n  const { language, content } = block;\n\n  // Use highlight.js for syntax highlighting\n  let highlightedCode;\n\n  try {\n    if (language && hljs.getLanguage(language)) {\n      highlightedCode = hljs.highlight(content, { language }).value;\n    } else {\n      highlightedCode = hljs.highlightAuto(content).value;\n    }\n  } catch (e) {\n    highlightedCode = sanitizeHtml(content);\n  }\n\n  return `\n    <pre class=\"blockdoc-pre\">\n      <code class=\"blockdoc-code ${\n  language ? `language-${language}` : ''\n}\">${highlightedCode}</code>\n    </pre>\n  `;\n}\n\n/**\n * Render a list block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderListBlock(block) {\n  const { items, listType } = block;\n\n  if (!items || !Array.isArray(items)) {\n    return '<p>Invalid list items</p>';\n  }\n\n  const tag = listType === 'ordered' ? 'ol' : 'ul';\n\n  const itemsHtml = items\n    .map((item) => `<li>${marked.parse(item)}</li>`)\n    .join('');\n\n  return `<${tag} class=\"blockdoc-list blockdoc-list-${listType}\">${itemsHtml}</${tag}>`;\n}\n\n/**\n * Render a quote block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderQuoteBlock(block) {\n  const { content, attribution } = block;\n\n  let html = `<blockquote class=\"blockdoc-quote\">${marked.parse(\n    content\n  )}</blockquote>`;\n\n  if (attribution) {\n    html += `<cite class=\"blockdoc-attribution\">${sanitizeHtml(\n      attribution\n    )}</cite>`;\n  }\n\n  return html;\n}\n\n/**\n * Render an embed block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderEmbedBlock(block) {\n  const { url, caption, embedType } = block;\n\n  let embedHtml;\n\n  if (embedType === 'youtube') {\n    // Extract YouTube video ID\n    const videoId = extractYouTubeId(url);\n    if (videoId) {\n      embedHtml = `\n        <div class=\"blockdoc-embed-container\">\n          <iframe \n            width=\"560\" \n            height=\"315\" \n            src=\"https://www.youtube.com/embed/${videoId}\" \n            frameborder=\"0\" \n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n            allowfullscreen>\n          </iframe>\n        </div>\n      `;\n    } else {\n      embedHtml = '<p>Invalid YouTube URL</p>';\n    }\n  } else if (embedType === 'twitter') {\n    embedHtml = `\n      <div class=\"blockdoc-embed blockdoc-twitter\">\n        <blockquote class=\"twitter-tweet\">\n          <a href=\"${sanitizeHtml(url)}\"></a>\n        </blockquote>\n        <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n      </div>\n    `;\n  } else {\n    // Generic embed with iframe\n    embedHtml = `\n      <div class=\"blockdoc-embed\">\n        <iframe \n          src=\"${sanitizeHtml(url)}\" \n          frameborder=\"0\" \n          width=\"100%\" \n          height=\"400\"\n          allowfullscreen>\n        </iframe>\n      </div>\n    `;\n  }\n\n  if (caption) {\n    embedHtml += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`;\n    return `<figure class=\"blockdoc-figure\">${embedHtml}</figure>`;\n  }\n\n  return embedHtml;\n}\n\n/**\n * Render a divider block\n * @returns {string} HTML representation\n */\nfunction renderDividerBlock() {\n  return '<hr class=\"blockdoc-divider\" />';\n}\n\n/**\n * Extract YouTube video ID from URL\n * @param {string} url - YouTube URL\n * @returns {string|null} YouTube video ID or null if invalid\n */\nfunction extractYouTubeId(url) {\n  try {\n    const parsedUrl = new URL(url);\n\n    // Handle youtu.be format\n    if (parsedUrl.hostname === 'youtu.be') {\n      return parsedUrl.pathname.slice(1);\n    }\n\n    // Handle youtube.com format\n    if (\n      parsedUrl.hostname === 'www.youtube.com' ||\n      parsedUrl.hostname === 'youtube.com'\n    ) {\n      const params = new URLSearchParams(parsedUrl.search);\n      return params.get('v');\n    }\n\n    return null;\n  } catch (e) {\n    return null;\n  }\n}\n","/**\n * BlockDoc Markdown Renderer\n *\n * Converts BlockDoc documents to Markdown\n */\n\n/**\n * Render a BlockDoc document to Markdown\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} Markdown representation\n */\nexport function renderToMarkdown(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error('Invalid article structure');\n  }\n\n  const markdown = [\n    `# ${article.title}`,\n    ''\n  ];\n\n  // Add metadata if present\n  if (article.metadata) {\n    if (article.metadata.author) {\n      markdown.push(`> Author: ${article.metadata.author}`);\n    }\n    \n    if (article.metadata.publishedDate) {\n      const date = new Date(article.metadata.publishedDate);\n      markdown.push(`> Published: ${date.toDateString()}`);\n    }\n    \n    if (article.metadata.tags && Array.isArray(article.metadata.tags) && article.metadata.tags.length > 0) {\n      markdown.push(`> Tags: ${article.metadata.tags.join(', ')}`);\n    }\n    \n    markdown.push('');\n  }\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    markdown.push(renderBlockToMarkdown(block));\n    markdown.push(''); // Add a blank line after each block\n  });\n\n  return markdown.join('\\n');\n}\n\n/**\n * Render a single block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation of the block\n */\nfunction renderBlockToMarkdown(block) {\n  const { type } = block;\n\n  switch (type) {\n  case 'text':\n    return renderTextBlockToMarkdown(block);\n  case 'heading':\n    return renderHeadingBlockToMarkdown(block);\n  case 'image':\n    return renderImageBlockToMarkdown(block);\n  case 'code':\n    return renderCodeBlockToMarkdown(block);\n  case 'list':\n    return renderListBlockToMarkdown(block);\n  case 'quote':\n    return renderQuoteBlockToMarkdown(block);\n  case 'embed':\n    return renderEmbedBlockToMarkdown(block);\n  case 'divider':\n    return '---';\n  default:\n    return `[Unknown block type: ${type}]`;\n  }\n}\n\n/**\n * Render a text block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderTextBlockToMarkdown(block) {\n  // Text content is already in markdown format\n  return block.content;\n}\n\n/**\n * Render a heading block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderHeadingBlockToMarkdown(block) {\n  const { level, content } = block;\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6);\n  const hashtags = '#'.repeat(validLevel);\n  \n  return `${hashtags} ${content}`;\n}\n\n/**\n * Render an image block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderImageBlockToMarkdown(block) {\n  const { url, alt, caption } = block;\n  \n  let markdown = `![${alt || ''}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render a code block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderCodeBlockToMarkdown(block) {\n  const { language, content } = block;\n  \n  return '```' + (language || '') + '\\n' + content + '\\n```';\n}\n\n/**\n * Render a list block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderListBlockToMarkdown(block) {\n  const { items, listType } = block;\n  \n  if (!items || !Array.isArray(items)) {\n    return '[Invalid list items]';\n  }\n  \n  return items.map((item, index) => {\n    if (listType === 'ordered') {\n      return `${index + 1}. ${item}`;\n    } else {\n      return `- ${item}`;\n    }\n  }).join('\\n');\n}\n\n/**\n * Render a quote block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderQuoteBlockToMarkdown(block) {\n  const { content, attribution } = block;\n  \n  let markdown = content.split('\\n').map(line => `> ${line}`).join('\\n');\n  \n  if (attribution) {\n    markdown += `\\n>\\n> \u0014 ${attribution}`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render an embed block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderEmbedBlockToMarkdown(block) {\n  const { url, caption, embedType } = block;\n  \n  let markdown = `[${embedType || 'Embedded content'}: ${url}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}","/**\n * BlockDoc Block\n *\n * Represents a single content block within a BlockDoc document\n */\n\n// Define allowed block types\nconst ALLOWED_TYPES = [\n  'text',\n  'heading',\n  'image',\n  'code',\n  'list',\n  'quote',\n  'embed',\n  'divider',\n];\n\n// Define type-specific required properties\nconst TYPE_REQUIREMENTS = {\n  heading: ['level'],\n  code: ['language'],\n  image: ['url', 'alt'],\n  list: ['items', 'listType'],\n};\n\nexport class Block {\n  /**\n   * Create a new block\n   * @param {Object} data - Block data\n   * @param {string} data.id - Unique identifier\n   * @param {string} data.type - Block type\n   * @param {string} data.content - Block content\n   * @param {Object} [data.properties] - Additional type-specific properties\n   */\n  constructor(data) {\n    if (!data.id) {\n      throw new Error('Block ID is required');\n    }\n\n    if (!data.type || !ALLOWED_TYPES.includes(data.type)) {\n      throw new Error(\n        `Invalid block type: ${\n          data.type\n        }. Allowed types are: ${ALLOWED_TYPES.join(', ')}`\n      );\n    }\n\n    // Basic properties all blocks have\n    this.id = data.id;\n    this.type = data.type;\n    this.content = data.content || '';\n\n    // Check type-specific required properties\n    const requiredProps = TYPE_REQUIREMENTS[this.type] || [];\n    for (const prop of requiredProps) {\n      if (data[prop] === undefined) {\n        throw new Error(\n          `Block of type \"${this.type}\" requires property \"${prop}\"`\n        );\n      }\n      this[prop] = data[prop];\n    }\n\n    // Copy any additional properties\n    Object.keys(data).forEach((key) => {\n      if (!['id', 'type', 'content'].includes(key) && this[key] === undefined) {\n        this[key] = data[key];\n      }\n    });\n  }\n\n  /**\n   * Update block properties\n   * @param {Object} updates - Properties to update\n   * @returns {Block} Updated block instance\n   */\n  update(updates) {\n    // Cannot change block type or ID\n    const { id, type, ...allowedUpdates } = updates;\n\n    // Apply updates\n    Object.keys(allowedUpdates).forEach((key) => {\n      this[key] = allowedUpdates[key];\n    });\n\n    return this;\n  }\n\n  /**\n   * Convert block to plain object\n   * @returns {Object} Block as plain object\n   */\n  toJSON() {\n    const result = {\n      id: this.id,\n      type: this.type,\n      content: this.content,\n    };\n\n    // Add type-specific properties\n    Object.keys(this).forEach((key) => {\n      if (!['id', 'type', 'content'].includes(key)) {\n        result[key] = this[key];\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Create common block types with simplified APIs\n   */\n\n  /**\n   * Create a text block\n   * @param {string} id - Block ID\n   * @param {string} content - Markdown content\n   * @returns {Block} New block instance\n   */\n  static text(id, content) {\n    return new Block({\n      id,\n      type: 'text',\n      content,\n    });\n  }\n\n  /**\n   * Create a heading block\n   * @param {string} id - Block ID\n   * @param {number} level - Heading level (1-6)\n   * @param {string} content - Heading text\n   * @returns {Block} New block instance\n   */\n  static heading(id, level, content) {\n    return new Block({\n      id,\n      type: 'heading',\n      level,\n      content,\n    });\n  }\n\n  /**\n   * Create an image block\n   * @param {string} id - Block ID\n   * @param {string} url - Image URL\n   * @param {string} alt - Alt text\n   * @param {string} [caption] - Optional caption\n   * @returns {Block} New block instance\n   */\n  static image(id, url, alt, caption) {\n    return new Block({\n      id,\n      type: 'image',\n      content: '',\n      url,\n      alt,\n      ...(caption ? { caption } : {}),\n    });\n  }\n\n  /**\n   * Create a code block\n   * @param {string} id - Block ID\n   * @param {string} language - Programming language\n   * @param {string} content - Code content\n   * @returns {Block} New block instance\n   */\n  static code(id, language, content) {\n    return new Block({\n      id,\n      type: 'code',\n      language,\n      content,\n    });\n  }\n\n  /**\n   * Create a list block\n   * @param {string} id - Block ID\n   * @param {Array<string>} items - List items\n   * @param {string} [listType='unordered'] - List type (ordered or unordered)\n   * @returns {Block} New block instance\n   */\n  static list(id, items, listType = 'unordered') {\n    return new Block({\n      id,\n      type: 'list',\n      content: '',\n      items,\n      listType,\n    });\n  }\n}\n","/**\n * BlockDoc Document\n *\n * Core class for creating, manipulating and rendering BlockDoc documents\n */\n\nimport Ajv from 'ajv';\nimport addFormats from 'ajv-formats';\nimport { schema } from '../schema-loader.js';\nimport { renderToHTML } from '../renderers/html.js';\nimport { renderToMarkdown } from '../renderers/markdown.js';\nimport { Block } from './block.js';\n\nexport class BlockDocDocument {\n  /**\n   * Create a new BlockDoc document\n   * @param {Object} options - Document initialization options\n   * @param {string} options.title - Document title\n   * @param {Object} [options.metadata] - Optional document metadata\n   * @param {Array<Object>} [options.blocks] - Initial blocks to add\n   */\n  constructor({ title, metadata = {}, blocks = [] }) {\n    this.article = {\n      title,\n      metadata,\n      blocks: [],\n    };\n\n    // Add initial blocks if provided\n    if (blocks && Array.isArray(blocks)) {\n      blocks.forEach((block) => this.addBlock(block));\n    }\n  }\n\n  /**\n   * Validate the document against the BlockDoc schema\n   * @returns {boolean} True if valid\n   * @throws {Error} If validation fails\n   */\n  validate() {\n    const ajv = new Ajv();\n    addFormats(ajv);\n    const validate = ajv.compile(schema);\n    const valid = validate({ article: this.article });\n\n    if (!valid) {\n      const errors = validate.errors;\n      throw new Error(`Invalid BlockDoc document: ${JSON.stringify(errors)}`);\n    }\n\n    return true;\n  }\n\n  /**\n   * Add a block to the document\n   * @param {Object} blockData - Block data\n   * @returns {Block} The created block\n   */\n  addBlock(blockData) {\n    // Check if ID already exists\n    if (this.getBlock(blockData.id)) {\n      throw new Error(`Block with ID \"${blockData.id}\" already exists`);\n    }\n\n    const block = new Block(blockData);\n    this.article.blocks.push(block.toJSON());\n    return block;\n  }\n\n  /**\n   * Insert a block at a specific position\n   * @param {Object} blockData - Block data\n   * @param {number} position - Position to insert at\n   * @returns {Block} The created block\n   */\n  insertBlock(blockData, position) {\n    // Check if ID already exists\n    if (this.getBlock(blockData.id)) {\n      throw new Error(`Block with ID \"${blockData.id}\" already exists`);\n    }\n\n    const block = new Block(blockData);\n    this.article.blocks.splice(position, 0, block.toJSON());\n    return block;\n  }\n\n  /**\n   * Get a block by ID\n   * @param {string} id - Block ID\n   * @returns {Object|null} The block or null if not found\n   */\n  getBlock(id) {\n    return this.article.blocks.find((block) => block.id === id) || null;\n  }\n\n  /**\n   * Update a block by ID\n   * @param {string} id - Block ID\n   * @param {Object} updates - Properties to update\n   * @returns {Object} The updated block\n   */\n  updateBlock(id, updates) {\n    const index = this.article.blocks.findIndex((block) => block.id === id);\n\n    if (index === -1) {\n      throw new Error(`Block with ID \"${id}\" not found`);\n    }\n\n    // Create a new block with the updates\n    const currentBlock = this.article.blocks[index];\n    const updatedBlock = { ...currentBlock, ...updates };\n\n    // Validate the updated block\n    const block = new Block(updatedBlock);\n\n    // Update the block in the document\n    this.article.blocks[index] = block.toJSON();\n\n    return this.article.blocks[index];\n  }\n\n  /**\n   * Remove a block by ID\n   * @param {string} id - Block ID\n   * @returns {boolean} True if removed\n   */\n  removeBlock(id) {\n    const index = this.article.blocks.findIndex((block) => block.id === id);\n\n    if (index === -1) {\n      return false;\n    }\n\n    this.article.blocks.splice(index, 1);\n    return true;\n  }\n\n  /**\n   * Move a block to a new position\n   * @param {string} id - Block ID\n   * @param {number} newPosition - New position\n   * @returns {boolean} True if moved\n   */\n  moveBlock(id, newPosition) {\n    const index = this.article.blocks.findIndex((block) => block.id === id);\n\n    if (index === -1) {\n      return false;\n    }\n\n    if (newPosition < 0 || newPosition >= this.article.blocks.length) {\n      throw new Error(`Invalid position: ${newPosition}`);\n    }\n\n    // Remove the block from its current position\n    const [block] = this.article.blocks.splice(index, 1);\n\n    // Insert it at the new position\n    this.article.blocks.splice(newPosition, 0, block);\n\n    return true;\n  }\n\n  /**\n   * Render the document to HTML\n   * @returns {string} HTML representation\n   */\n  renderToHTML() {\n    return renderToHTML(this.article);\n  }\n\n  /**\n   * Render the document to Markdown\n   * @returns {string} Markdown representation\n   */\n  renderToMarkdown() {\n    return renderToMarkdown(this.article);\n  }\n\n  /**\n   * Export the document as a JSON object\n   * @returns {Object} Document as JSON object\n   */\n  toJSON() {\n    return { article: this.article };\n  }\n\n  /**\n   * Export the document as a JSON string\n   * @returns {string} Document as JSON string\n   */\n  toString() {\n    return JSON.stringify(this.toJSON(), null, 2);\n  }\n\n  /**\n   * Create a BlockDoc document from a JSON object\n   * @param {Object|string} json - JSON object or string\n   * @returns {BlockDocDocument} New document instance\n   */\n  static fromJSON(json) {\n    const data = typeof json === 'string' ? JSON.parse(json) : json;\n\n    if (!data.article) {\n      throw new Error('Invalid BlockDoc document: missing article property');\n    }\n\n    return new BlockDocDocument({\n      title: data.article.title,\n      metadata: data.article.metadata || {},\n      blocks: data.article.blocks || [],\n    });\n  }\n}\n"],"names":["__dirname","path","dirname","fileURLToPath","import","meta","url","schemaPath","join","schemaContent","fs","readFileSync","schema","JSON","parse","sanitizeHtml","html","map","String","replace","m","marked","setOptions","highlight","code","lang","hljs","getLanguage","language","value","highlightAuto","headerIds","mangle","renderToHTML","article","blocks","Array","isArray","Error","title","forEach","block","push","renderBlock","id","type","openWrapper","closeWrapper","content","renderTextBlock","renderHeadingBlock","renderImageBlock","renderCodeBlock","renderListBlock","renderQuoteBlock","renderEmbedBlock","renderDividerBlock","level","validLevel","Math","min","max","parseInt","alt","caption","highlightedCode","e","items","listType","tag","itemsHtml","item","attribution","embedType","embedHtml","videoId","extractYouTubeId","parsedUrl","URL","hostname","pathname","slice","params","URLSearchParams","search","get","renderToMarkdown","markdown","metadata","author","publishedDate","date","Date","toDateString","tags","length","renderBlockToMarkdown","renderTextBlockToMarkdown","renderHeadingBlockToMarkdown","renderImageBlockToMarkdown","renderCodeBlockToMarkdown","renderListBlockToMarkdown","renderQuoteBlockToMarkdown","renderEmbedBlockToMarkdown","hashtags","repeat","index","split","line","ALLOWED_TYPES","TYPE_REQUIREMENTS","heading","image","list","Block","constructor","data","includes","requiredProps","prop","undefined","Object","keys","key","update","updates","allowedUpdates","toJSON","result","text","BlockDocDocument","addBlock","validate","ajv","Ajv","addFormats","compile","valid","errors","stringify","blockData","getBlock","insertBlock","position","splice","find","updateBlock","findIndex","currentBlock","updatedBlock","removeBlock","moveBlock","newPosition","toString","fromJSON","json"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;AAMA;AACA,MAAMA,SAAS,GAAGC,IAAI,CAACC,OAAO,CAACC,aAAa,CAACC,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC;;AAE9D;AACA,MAAMC,UAAU,GAAGN,IAAI,CAACO,IAAI,CAACR,SAAS,EAAE,6BAA6B,CAAC;AACtE,MAAMS,aAAa,GAAGC,EAAE,CAACC,YAAY,CAACJ,UAAU,EAAE,OAAO,CAAC;AACnD,MAAMK,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;;AChB/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASM,YAAYA,CAACC,IAAI,EAAE;AACjC,EAAA,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;AAEpB,EAAA,MAAMC,GAAG,GAAG;AACV,IAAA,GAAG,EAAE,OAAO;AACZ,IAAA,GAAG,EAAE,MAAM;AACX,IAAA,GAAG,EAAE,MAAM;AACX,IAAA,GAAG,EAAE,QAAQ;AACb,IAAA,IAAI,EAAE;GACP;EAED,OAAOC,MAAM,CAACF,IAAI,CAAC,CAACG,OAAO,CAAC,UAAU,EAAE,UAASC,CAAC,EAAE;IAAE,OAAOH,GAAG,CAACG,CAAC,CAAC;AAAE,GAAC,CAAC;AACzE;;ACvBA;AACA;AACA;AACA;AACA;;;AAMA;AACAC,MAAM,CAACC,UAAU,CAAC;AAChBC,EAAAA,SAAS,EAAE,UAAUC,IAAI,EAAEC,IAAI,EAAE;IAC/B,IAAIA,IAAI,IAAIC,IAAI,CAACC,WAAW,CAACF,IAAI,CAAC,EAAE;AAClC,MAAA,OAAOC,IAAI,CAACH,SAAS,CAACC,IAAI,EAAE;AAAEI,QAAAA,QAAQ,EAAEH;OAAM,CAAC,CAACI,KAAK;AACvD;AACA,IAAA,OAAOH,IAAI,CAACI,aAAa,CAACN,IAAI,CAAC,CAACK,KAAK;GACtC;AACDE,EAAAA,SAAS,EAAE,IAAI;AACfC,EAAAA,MAAM,EAAE;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACO,SAASC,YAAYA,CAACC,OAAO,EAAE;AACpC,EAAA,IAAI,CAACA,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,MAAM,CAAC,EAAE;AACjE,IAAA,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;AAC9C;AAEA,EAAA,MAAMtB,IAAI,GAAG,CACX,oCAAoC,EACpC,CAAA,2BAAA,EAA8BD,YAAY,CAACmB,OAAO,CAACK,KAAK,CAAC,OAAO,CACjE;;AAED;AACAL,EAAAA,OAAO,CAACC,MAAM,CAACK,OAAO,CAAEC,KAAK,IAAK;AAChCzB,IAAAA,IAAI,CAAC0B,IAAI,CAACC,WAAW,CAACF,KAAK,CAAC,CAAC;AAC/B,GAAC,CAAC;AAEFzB,EAAAA,IAAI,CAAC0B,IAAI,CAAC,YAAY,CAAC;AAEvB,EAAA,OAAO1B,IAAI,CAACR,IAAI,CAAC,IAAI,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASmC,WAAWA,CAACF,KAAK,EAAE;EAC1B,MAAM;IAAEG,EAAE;AAAEC,IAAAA;AAAK,GAAC,GAAGJ,KAAK;;AAE1B;EACA,MAAMK,WAAW,GAAG,CAAuCD,oCAAAA,EAAAA,IAAI,oBAAoBD,EAAE,CAAA,mBAAA,EAAsBC,IAAI,CAAI,EAAA,CAAA;EACnH,MAAME,YAAY,GAAG,QAAQ;AAE7B,EAAA,IAAIC,OAAO;AAEX,EAAA,QAAQH,IAAI;AACZ,IAAA,KAAK,MAAM;AACTG,MAAAA,OAAO,GAAGC,eAAe,CAACR,KAAK,CAAC;AAChC,MAAA;AACF,IAAA,KAAK,SAAS;AACZO,MAAAA,OAAO,GAAGE,kBAAkB,CAACT,KAAK,CAAC;AACnC,MAAA;AACF,IAAA,KAAK,OAAO;AACVO,MAAAA,OAAO,GAAGG,gBAAgB,CAACV,KAAK,CAAC;AACjC,MAAA;AACF,IAAA,KAAK,MAAM;AACTO,MAAAA,OAAO,GAAGI,eAAe,CAACX,KAAK,CAAC;AAChC,MAAA;AACF,IAAA,KAAK,MAAM;AACTO,MAAAA,OAAO,GAAGK,eAAe,CAACZ,KAAK,CAAC;AAChC,MAAA;AACF,IAAA,KAAK,OAAO;AACVO,MAAAA,OAAO,GAAGM,gBAAgB,CAACb,KAAK,CAAC;AACjC,MAAA;AACF,IAAA,KAAK,OAAO;AACVO,MAAAA,OAAO,GAAGO,gBAAgB,CAACd,KAAK,CAAC;AACjC,MAAA;AACF,IAAA,KAAK,SAAS;MACZO,OAAO,GAAGQ,kBAAkB,EAAE;AAC9B,MAAA;AACF,IAAA;MACER,OAAO,GAAG,CAA0BH,uBAAAA,EAAAA,IAAI,CAAM,IAAA,CAAA;AAChD;AAEA,EAAA,OAAO,GAAGC,WAAW,CAAA,EAAGE,OAAO,CAAA,EAAGD,YAAY,CAAE,CAAA;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,eAAeA,CAACR,KAAK,EAAE;AAC9B;AACA,EAAA,OAAOpB,MAAM,CAACP,KAAK,CAAC2B,KAAK,CAACO,OAAO,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAACT,KAAK,EAAE;EACjC,MAAM;IAAEgB,KAAK;AAAET,IAAAA;AAAQ,GAAC,GAAGP,KAAK;EAChC,MAAMiB,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACL,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAEjE,OAAO,CAAA,EAAA,EAAKC,UAAU,CAAI3C,CAAAA,EAAAA,YAAY,CAACiC,OAAO,CAAC,CAAMU,GAAAA,EAAAA,UAAU,CAAG,CAAA,CAAA;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASP,gBAAgBA,CAACV,KAAK,EAAE;EAC/B,MAAM;IAAEnC,GAAG;IAAEyD,GAAG;AAAEC,IAAAA;AAAQ,GAAC,GAAGvB,KAAK;AAEnC,EAAA,IAAIzB,IAAI,GAAG,CAAaD,UAAAA,EAAAA,YAAY,CAACT,GAAG,CAAC,CAAA,OAAA,EAAUS,YAAY,CAC7DgD,GACF,CAAC,CAA6B,2BAAA,CAAA;AAE9B,EAAA,IAAIC,OAAO,EAAE;AACXhD,IAAAA,IAAI,IAAI,CAAwCD,qCAAAA,EAAAA,YAAY,CAC1DiD,OACF,CAAC,CAAe,aAAA,CAAA;IAChB,OAAO,CAAA,gCAAA,EAAmChD,IAAI,CAAW,SAAA,CAAA;AAC3D;AAEA,EAAA,OAAOA,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASoC,eAAeA,CAACX,KAAK,EAAE;EAC9B,MAAM;IAAEb,QAAQ;AAAEoB,IAAAA;AAAQ,GAAC,GAAGP,KAAK;;AAEnC;AACA,EAAA,IAAIwB,eAAe;EAEnB,IAAI;IACF,IAAIrC,QAAQ,IAAIF,IAAI,CAACC,WAAW,CAACC,QAAQ,CAAC,EAAE;AAC1CqC,MAAAA,eAAe,GAAGvC,IAAI,CAACH,SAAS,CAACyB,OAAO,EAAE;AAAEpB,QAAAA;OAAU,CAAC,CAACC,KAAK;AAC/D,KAAC,MAAM;MACLoC,eAAe,GAAGvC,IAAI,CAACI,aAAa,CAACkB,OAAO,CAAC,CAACnB,KAAK;AACrD;GACD,CAAC,OAAOqC,CAAC,EAAE;AACVD,IAAAA,eAAe,GAAGlD,YAAY,CAACiC,OAAO,CAAC;AACzC;EAEA,OAAO;AACT;AACA,iCACEpB,EAAAA,QAAQ,GAAG,CAAYA,SAAAA,EAAAA,QAAQ,EAAE,GAAG,EAAE,KACnCqC,eAAe,CAAA;AACpB;AACA,EAAG,CAAA;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASZ,eAAeA,CAACZ,KAAK,EAAE;EAC9B,MAAM;IAAE0B,KAAK;AAAEC,IAAAA;AAAS,GAAC,GAAG3B,KAAK;EAEjC,IAAI,CAAC0B,KAAK,IAAI,CAAC/B,KAAK,CAACC,OAAO,CAAC8B,KAAK,CAAC,EAAE;AACnC,IAAA,OAAO,2BAA2B;AACpC;EAEA,MAAME,GAAG,GAAGD,QAAQ,KAAK,SAAS,GAAG,IAAI,GAAG,IAAI;EAEhD,MAAME,SAAS,GAAGH,KAAK,CACpBlD,GAAG,CAAEsD,IAAI,IAAK,CAAOlD,IAAAA,EAAAA,MAAM,CAACP,KAAK,CAACyD,IAAI,CAAC,CAAA,KAAA,CAAO,CAAC,CAC/C/D,IAAI,CAAC,EAAE,CAAC;EAEX,OAAO,CAAA,CAAA,EAAI6D,GAAG,CAAuCD,oCAAAA,EAAAA,QAAQ,KAAKE,SAAS,CAAA,EAAA,EAAKD,GAAG,CAAG,CAAA,CAAA;AACxF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASf,gBAAgBA,CAACb,KAAK,EAAE;EAC/B,MAAM;IAAEO,OAAO;AAAEwB,IAAAA;AAAY,GAAC,GAAG/B,KAAK;EAEtC,IAAIzB,IAAI,GAAG,CAAsCK,mCAAAA,EAAAA,MAAM,CAACP,KAAK,CAC3DkC,OACF,CAAC,CAAe,aAAA,CAAA;AAEhB,EAAA,IAAIwB,WAAW,EAAE;AACfxD,IAAAA,IAAI,IAAI,CAAsCD,mCAAAA,EAAAA,YAAY,CACxDyD,WACF,CAAC,CAAS,OAAA,CAAA;AACZ;AAEA,EAAA,OAAOxD,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASuC,gBAAgBA,CAACd,KAAK,EAAE;EAC/B,MAAM;IAAEnC,GAAG;IAAE0D,OAAO;AAAES,IAAAA;AAAU,GAAC,GAAGhC,KAAK;AAEzC,EAAA,IAAIiC,SAAS;EAEb,IAAID,SAAS,KAAK,SAAS,EAAE;AAC3B;AACA,IAAA,MAAME,OAAO,GAAGC,gBAAgB,CAACtE,GAAG,CAAC;AACrC,IAAA,IAAIqE,OAAO,EAAE;AACXD,MAAAA,SAAS,GAAG;AAClB;AACA;AACA;AACA;AACA,+CAAA,EAAiDC,OAAO,CAAA;AACxD;AACA;AACA;AACA;AACA;AACA,MAAO,CAAA;AACH,KAAC,MAAM;AACLD,MAAAA,SAAS,GAAG,4BAA4B;AAC1C;AACF,GAAC,MAAM,IAAID,SAAS,KAAK,SAAS,EAAE;AAClCC,IAAAA,SAAS,GAAG;AAChB;AACA;AACA,mBAAqB3D,EAAAA,YAAY,CAACT,GAAG,CAAC,CAAA;AACtC;AACA;AACA;AACA,IAAK,CAAA;AACH,GAAC,MAAM;AACL;AACAoE,IAAAA,SAAS,GAAG;AAChB;AACA;AACA,eAAiB3D,EAAAA,YAAY,CAACT,GAAG,CAAC,CAAA;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,IAAK,CAAA;AACH;AAEA,EAAA,IAAI0D,OAAO,EAAE;AACXU,IAAAA,SAAS,IAAI,CAAwC3D,qCAAAA,EAAAA,YAAY,CAC/DiD,OACF,CAAC,CAAe,aAAA,CAAA;IAChB,OAAO,CAAA,gCAAA,EAAmCU,SAAS,CAAW,SAAA,CAAA;AAChE;AAEA,EAAA,OAAOA,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA,SAASlB,kBAAkBA,GAAG;AAC5B,EAAA,OAAO,iCAAiC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASoB,gBAAgBA,CAACtE,GAAG,EAAE;EAC7B,IAAI;AACF,IAAA,MAAMuE,SAAS,GAAG,IAAIC,GAAG,CAACxE,GAAG,CAAC;;AAE9B;AACA,IAAA,IAAIuE,SAAS,CAACE,QAAQ,KAAK,UAAU,EAAE;AACrC,MAAA,OAAOF,SAAS,CAACG,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;AACpC;;AAEA;IACA,IACEJ,SAAS,CAACE,QAAQ,KAAK,iBAAiB,IACxCF,SAAS,CAACE,QAAQ,KAAK,aAAa,EACpC;MACA,MAAMG,MAAM,GAAG,IAAIC,eAAe,CAACN,SAAS,CAACO,MAAM,CAAC;AACpD,MAAA,OAAOF,MAAM,CAACG,GAAG,CAAC,GAAG,CAAC;AACxB;AAEA,IAAA,OAAO,IAAI;GACZ,CAAC,OAAOnB,CAAC,EAAE;AACV,IAAA,OAAO,IAAI;AACb;AACF;;ACnTA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASoB,gBAAgBA,CAACpD,OAAO,EAAE;AACxC,EAAA,IAAI,CAACA,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,MAAM,CAAC,EAAE;AACjE,IAAA,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;AAC9C;EAEA,MAAMiD,QAAQ,GAAG,CACf,CAAKrD,EAAAA,EAAAA,OAAO,CAACK,KAAK,CAAA,CAAE,EACpB,EAAE,CACH;;AAED;EACA,IAAIL,OAAO,CAACsD,QAAQ,EAAE;AACpB,IAAA,IAAItD,OAAO,CAACsD,QAAQ,CAACC,MAAM,EAAE;MAC3BF,QAAQ,CAAC7C,IAAI,CAAC,CAAaR,UAAAA,EAAAA,OAAO,CAACsD,QAAQ,CAACC,MAAM,CAAA,CAAE,CAAC;AACvD;AAEA,IAAA,IAAIvD,OAAO,CAACsD,QAAQ,CAACE,aAAa,EAAE;MAClC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC1D,OAAO,CAACsD,QAAQ,CAACE,aAAa,CAAC;MACrDH,QAAQ,CAAC7C,IAAI,CAAC,CAAgBiD,aAAAA,EAAAA,IAAI,CAACE,YAAY,EAAE,CAAA,CAAE,CAAC;AACtD;IAEA,IAAI3D,OAAO,CAACsD,QAAQ,CAACM,IAAI,IAAI1D,KAAK,CAACC,OAAO,CAACH,OAAO,CAACsD,QAAQ,CAACM,IAAI,CAAC,IAAI5D,OAAO,CAACsD,QAAQ,CAACM,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;AACrGR,MAAAA,QAAQ,CAAC7C,IAAI,CAAC,CAAA,QAAA,EAAWR,OAAO,CAACsD,QAAQ,CAACM,IAAI,CAACtF,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AAC9D;AAEA+E,IAAAA,QAAQ,CAAC7C,IAAI,CAAC,EAAE,CAAC;AACnB;;AAEA;AACAR,EAAAA,OAAO,CAACC,MAAM,CAACK,OAAO,CAAEC,KAAK,IAAK;AAChC8C,IAAAA,QAAQ,CAAC7C,IAAI,CAACsD,qBAAqB,CAACvD,KAAK,CAAC,CAAC;AAC3C8C,IAAAA,QAAQ,CAAC7C,IAAI,CAAC,EAAE,CAAC,CAAC;AACpB,GAAC,CAAC;AAEF,EAAA,OAAO6C,QAAQ,CAAC/E,IAAI,CAAC,IAAI,CAAC;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASwF,qBAAqBA,CAACvD,KAAK,EAAE;EACpC,MAAM;AAAEI,IAAAA;AAAK,GAAC,GAAGJ,KAAK;AAEtB,EAAA,QAAQI,IAAI;AACZ,IAAA,KAAK,MAAM;MACT,OAAOoD,yBAAyB,CAACxD,KAAK,CAAC;AACzC,IAAA,KAAK,SAAS;MACZ,OAAOyD,4BAA4B,CAACzD,KAAK,CAAC;AAC5C,IAAA,KAAK,OAAO;MACV,OAAO0D,0BAA0B,CAAC1D,KAAK,CAAC;AAC1C,IAAA,KAAK,MAAM;MACT,OAAO2D,yBAAyB,CAAC3D,KAAK,CAAC;AACzC,IAAA,KAAK,MAAM;MACT,OAAO4D,yBAAyB,CAAC5D,KAAK,CAAC;AACzC,IAAA,KAAK,OAAO;MACV,OAAO6D,0BAA0B,CAAC7D,KAAK,CAAC;AAC1C,IAAA,KAAK,OAAO;MACV,OAAO8D,0BAA0B,CAAC9D,KAAK,CAAC;AAC1C,IAAA,KAAK,SAAS;AACZ,MAAA,OAAO,KAAK;AACd,IAAA;MACE,OAAO,CAAA,qBAAA,EAAwBI,IAAI,CAAG,CAAA,CAAA;AACxC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASoD,yBAAyBA,CAACxD,KAAK,EAAE;AACxC;EACA,OAAOA,KAAK,CAACO,OAAO;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASkD,4BAA4BA,CAACzD,KAAK,EAAE;EAC3C,MAAM;IAAEgB,KAAK;AAAET,IAAAA;AAAQ,GAAC,GAAGP,KAAK;EAChC,MAAMiB,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACL,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AACjE,EAAA,MAAM+C,QAAQ,GAAG,GAAG,CAACC,MAAM,CAAC/C,UAAU,CAAC;AAEvC,EAAA,OAAO,CAAG8C,EAAAA,QAAQ,CAAIxD,CAAAA,EAAAA,OAAO,CAAE,CAAA;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASmD,0BAA0BA,CAAC1D,KAAK,EAAE;EACzC,MAAM;IAAEnC,GAAG;IAAEyD,GAAG;AAAEC,IAAAA;AAAQ,GAAC,GAAGvB,KAAK;EAEnC,IAAI8C,QAAQ,GAAG,CAAKxB,EAAAA,EAAAA,GAAG,IAAI,EAAE,CAAA,EAAA,EAAKzD,GAAG,CAAG,CAAA,CAAA;AAExC,EAAA,IAAI0D,OAAO,EAAE;IACXuB,QAAQ,IAAI,CAAMvB,GAAAA,EAAAA,OAAO,CAAG,CAAA,CAAA;AAC9B;AAEA,EAAA,OAAOuB,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASa,yBAAyBA,CAAC3D,KAAK,EAAE;EACxC,MAAM;IAAEb,QAAQ;AAAEoB,IAAAA;AAAQ,GAAC,GAAGP,KAAK;EAEnC,OAAO,KAAK,IAAIb,QAAQ,IAAI,EAAE,CAAC,GAAG,IAAI,GAAGoB,OAAO,GAAG,OAAO;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASqD,yBAAyBA,CAAC5D,KAAK,EAAE;EACxC,MAAM;IAAE0B,KAAK;AAAEC,IAAAA;AAAS,GAAC,GAAG3B,KAAK;EAEjC,IAAI,CAAC0B,KAAK,IAAI,CAAC/B,KAAK,CAACC,OAAO,CAAC8B,KAAK,CAAC,EAAE;AACnC,IAAA,OAAO,sBAAsB;AAC/B;EAEA,OAAOA,KAAK,CAAClD,GAAG,CAAC,CAACsD,IAAI,EAAEmC,KAAK,KAAK;IAChC,IAAItC,QAAQ,KAAK,SAAS,EAAE;AAC1B,MAAA,OAAO,GAAGsC,KAAK,GAAG,CAAC,CAAA,EAAA,EAAKnC,IAAI,CAAE,CAAA;AAChC,KAAC,MAAM;MACL,OAAO,CAAA,EAAA,EAAKA,IAAI,CAAE,CAAA;AACpB;AACF,GAAC,CAAC,CAAC/D,IAAI,CAAC,IAAI,CAAC;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS8F,0BAA0BA,CAAC7D,KAAK,EAAE;EACzC,MAAM;IAAEO,OAAO;AAAEwB,IAAAA;AAAY,GAAC,GAAG/B,KAAK;EAEtC,IAAI8C,QAAQ,GAAGvC,OAAO,CAAC2D,KAAK,CAAC,IAAI,CAAC,CAAC1F,GAAG,CAAC2F,IAAI,IAAI,KAAKA,IAAI,CAAA,CAAE,CAAC,CAACpG,IAAI,CAAC,IAAI,CAAC;AAEtE,EAAA,IAAIgE,WAAW,EAAE;IACfe,QAAQ,IAAI,CAAYf,SAAAA,EAAAA,WAAW,CAAE,CAAA;AACvC;AAEA,EAAA,OAAOe,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASgB,0BAA0BA,CAAC9D,KAAK,EAAE;EACzC,MAAM;IAAEnC,GAAG;IAAE0D,OAAO;AAAES,IAAAA;AAAU,GAAC,GAAGhC,KAAK;EAEzC,IAAI8C,QAAQ,GAAG,CAAA,CAAA,EAAId,SAAS,IAAI,kBAAkB,CAAKnE,EAAAA,EAAAA,GAAG,CAAKA,EAAAA,EAAAA,GAAG,CAAG,CAAA,CAAA;AAErE,EAAA,IAAI0D,OAAO,EAAE;IACXuB,QAAQ,IAAI,CAAMvB,GAAAA,EAAAA,OAAO,CAAG,CAAA,CAAA;AAC9B;AAEA,EAAA,OAAOuB,QAAQ;AACjB;;ACtLA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMsB,aAAa,GAAG,CACpB,MAAM,EACN,SAAS,EACT,OAAO,EACP,MAAM,EACN,MAAM,EACN,OAAO,EACP,OAAO,EACP,SAAS,CACV;;AAED;AACA,MAAMC,iBAAiB,GAAG;EACxBC,OAAO,EAAE,CAAC,OAAO,CAAC;EAClBvF,IAAI,EAAE,CAAC,UAAU,CAAC;AAClBwF,EAAAA,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;AACrBC,EAAAA,IAAI,EAAE,CAAC,OAAO,EAAE,UAAU;AAC5B,CAAC;AAEM,MAAMC,KAAK,CAAC;AACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,IAAI,EAAE;AAChB,IAAA,IAAI,CAACA,IAAI,CAACxE,EAAE,EAAE;AACZ,MAAA,MAAM,IAAIN,KAAK,CAAC,sBAAsB,CAAC;AACzC;AAEA,IAAA,IAAI,CAAC8E,IAAI,CAACvE,IAAI,IAAI,CAACgE,aAAa,CAACQ,QAAQ,CAACD,IAAI,CAACvE,IAAI,CAAC,EAAE;AACpD,MAAA,MAAM,IAAIP,KAAK,CACb,CAAA,oBAAA,EACE8E,IAAI,CAACvE,IAAI,CACagE,qBAAAA,EAAAA,aAAa,CAACrG,IAAI,CAAC,IAAI,CAAC,EAClD,CAAC;AACH;;AAEA;AACA,IAAA,IAAI,CAACoC,EAAE,GAAGwE,IAAI,CAACxE,EAAE;AACjB,IAAA,IAAI,CAACC,IAAI,GAAGuE,IAAI,CAACvE,IAAI;AACrB,IAAA,IAAI,CAACG,OAAO,GAAGoE,IAAI,CAACpE,OAAO,IAAI,EAAE;;AAEjC;IACA,MAAMsE,aAAa,GAAGR,iBAAiB,CAAC,IAAI,CAACjE,IAAI,CAAC,IAAI,EAAE;AACxD,IAAA,KAAK,MAAM0E,IAAI,IAAID,aAAa,EAAE;AAChC,MAAA,IAAIF,IAAI,CAACG,IAAI,CAAC,KAAKC,SAAS,EAAE;QAC5B,MAAM,IAAIlF,KAAK,CACb,CAAkB,eAAA,EAAA,IAAI,CAACO,IAAI,CAAA,qBAAA,EAAwB0E,IAAI,CAAA,CAAA,CACzD,CAAC;AACH;AACA,MAAA,IAAI,CAACA,IAAI,CAAC,GAAGH,IAAI,CAACG,IAAI,CAAC;AACzB;;AAEA;IACAE,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAAC5E,OAAO,CAAEmF,GAAG,IAAK;MACjC,IAAI,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,CAACN,QAAQ,CAACM,GAAG,CAAC,IAAI,IAAI,CAACA,GAAG,CAAC,KAAKH,SAAS,EAAE;AACvE,QAAA,IAAI,CAACG,GAAG,CAAC,GAAGP,IAAI,CAACO,GAAG,CAAC;AACvB;AACF,KAAC,CAAC;AACJ;;AAEA;AACF;AACA;AACA;AACA;EACEC,MAAMA,CAACC,OAAO,EAAE;AACd;IACA,MAAM;MAAEjF,EAAE;MAAEC,IAAI;MAAE,GAAGiF;AAAe,KAAC,GAAGD,OAAO;;AAE/C;IACAJ,MAAM,CAACC,IAAI,CAACI,cAAc,CAAC,CAACtF,OAAO,CAAEmF,GAAG,IAAK;AAC3C,MAAA,IAAI,CAACA,GAAG,CAAC,GAAGG,cAAc,CAACH,GAAG,CAAC;AACjC,KAAC,CAAC;AAEF,IAAA,OAAO,IAAI;AACb;;AAEA;AACF;AACA;AACA;AACEI,EAAAA,MAAMA,GAAG;AACP,IAAA,MAAMC,MAAM,GAAG;MACbpF,EAAE,EAAE,IAAI,CAACA,EAAE;MACXC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfG,OAAO,EAAE,IAAI,CAACA;KACf;;AAED;IACAyE,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAAClF,OAAO,CAAEmF,GAAG,IAAK;AACjC,MAAA,IAAI,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,CAACN,QAAQ,CAACM,GAAG,CAAC,EAAE;AAC5CK,QAAAA,MAAM,CAACL,GAAG,CAAC,GAAG,IAAI,CAACA,GAAG,CAAC;AACzB;AACF,KAAC,CAAC;AAEF,IAAA,OAAOK,MAAM;AACf;;AAEA;AACF;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACE,EAAA,OAAOC,IAAIA,CAACrF,EAAE,EAAEI,OAAO,EAAE;IACvB,OAAO,IAAIkE,KAAK,CAAC;MACftE,EAAE;AACFC,MAAAA,IAAI,EAAE,MAAM;AACZG,MAAAA;AACF,KAAC,CAAC;AACJ;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,OAAO+D,OAAOA,CAACnE,EAAE,EAAEa,KAAK,EAAET,OAAO,EAAE;IACjC,OAAO,IAAIkE,KAAK,CAAC;MACftE,EAAE;AACFC,MAAAA,IAAI,EAAE,SAAS;MACfY,KAAK;AACLT,MAAAA;AACF,KAAC,CAAC;AACJ;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOgE,KAAKA,CAACpE,EAAE,EAAEtC,GAAG,EAAEyD,GAAG,EAAEC,OAAO,EAAE;IAClC,OAAO,IAAIkD,KAAK,CAAC;MACftE,EAAE;AACFC,MAAAA,IAAI,EAAE,OAAO;AACbG,MAAAA,OAAO,EAAE,EAAE;MACX1C,GAAG;MACHyD,GAAG;AACH,MAAA,IAAIC,OAAO,GAAG;AAAEA,QAAAA;OAAS,GAAG,EAAE;AAChC,KAAC,CAAC;AACJ;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACE,EAAA,OAAOxC,IAAIA,CAACoB,EAAE,EAAEhB,QAAQ,EAAEoB,OAAO,EAAE;IACjC,OAAO,IAAIkE,KAAK,CAAC;MACftE,EAAE;AACFC,MAAAA,IAAI,EAAE,MAAM;MACZjB,QAAQ;AACRoB,MAAAA;AACF,KAAC,CAAC;AACJ;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOiE,IAAIA,CAACrE,EAAE,EAAEuB,KAAK,EAAEC,QAAQ,GAAG,WAAW,EAAE;IAC7C,OAAO,IAAI8C,KAAK,CAAC;MACftE,EAAE;AACFC,MAAAA,IAAI,EAAE,MAAM;AACZG,MAAAA,OAAO,EAAE,EAAE;MACXmB,KAAK;AACLC,MAAAA;AACF,KAAC,CAAC;AACJ;AACF;;ACnMA;AACA;AACA;AACA;AACA;;AASO,MAAM8D,gBAAgB,CAAC;AAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACEf,EAAAA,WAAWA,CAAC;IAAE5E,KAAK;IAAEiD,QAAQ,GAAG,EAAE;AAAErD,IAAAA,MAAM,GAAG;AAAG,GAAC,EAAE;IACjD,IAAI,CAACD,OAAO,GAAG;MACbK,KAAK;MACLiD,QAAQ;AACRrD,MAAAA,MAAM,EAAE;KACT;;AAED;IACA,IAAIA,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;MACnCA,MAAM,CAACK,OAAO,CAAEC,KAAK,IAAK,IAAI,CAAC0F,QAAQ,CAAC1F,KAAK,CAAC,CAAC;AACjD;AACF;;AAEA;AACF;AACA;AACA;AACA;AACE2F,EAAAA,QAAQA,GAAG;AACT,IAAA,MAAMC,GAAG,GAAG,IAAIC,GAAG,EAAE;IACrBC,UAAU,CAACF,GAAG,CAAC;AACf,IAAA,MAAMD,QAAQ,GAAGC,GAAG,CAACG,OAAO,CAAC5H,MAAM,CAAC;IACpC,MAAM6H,KAAK,GAAGL,QAAQ,CAAC;MAAElG,OAAO,EAAE,IAAI,CAACA;AAAQ,KAAC,CAAC;IAEjD,IAAI,CAACuG,KAAK,EAAE;AACV,MAAA,MAAMC,MAAM,GAAGN,QAAQ,CAACM,MAAM;MAC9B,MAAM,IAAIpG,KAAK,CAAC,CAA8BzB,2BAAAA,EAAAA,IAAI,CAAC8H,SAAS,CAACD,MAAM,CAAC,CAAA,CAAE,CAAC;AACzE;AAEA,IAAA,OAAO,IAAI;AACb;;AAEA;AACF;AACA;AACA;AACA;EACEP,QAAQA,CAACS,SAAS,EAAE;AAClB;IACA,IAAI,IAAI,CAACC,QAAQ,CAACD,SAAS,CAAChG,EAAE,CAAC,EAAE;MAC/B,MAAM,IAAIN,KAAK,CAAC,CAAA,eAAA,EAAkBsG,SAAS,CAAChG,EAAE,kBAAkB,CAAC;AACnE;AAEA,IAAA,MAAMH,KAAK,GAAG,IAAIyE,KAAK,CAAC0B,SAAS,CAAC;AAClC,IAAA,IAAI,CAAC1G,OAAO,CAACC,MAAM,CAACO,IAAI,CAACD,KAAK,CAACsF,MAAM,EAAE,CAAC;AACxC,IAAA,OAAOtF,KAAK;AACd;;AAEA;AACF;AACA;AACA;AACA;AACA;AACEqG,EAAAA,WAAWA,CAACF,SAAS,EAAEG,QAAQ,EAAE;AAC/B;IACA,IAAI,IAAI,CAACF,QAAQ,CAACD,SAAS,CAAChG,EAAE,CAAC,EAAE;MAC/B,MAAM,IAAIN,KAAK,CAAC,CAAA,eAAA,EAAkBsG,SAAS,CAAChG,EAAE,kBAAkB,CAAC;AACnE;AAEA,IAAA,MAAMH,KAAK,GAAG,IAAIyE,KAAK,CAAC0B,SAAS,CAAC;AAClC,IAAA,IAAI,CAAC1G,OAAO,CAACC,MAAM,CAAC6G,MAAM,CAACD,QAAQ,EAAE,CAAC,EAAEtG,KAAK,CAACsF,MAAM,EAAE,CAAC;AACvD,IAAA,OAAOtF,KAAK;AACd;;AAEA;AACF;AACA;AACA;AACA;EACEoG,QAAQA,CAACjG,EAAE,EAAE;AACX,IAAA,OAAO,IAAI,CAACV,OAAO,CAACC,MAAM,CAAC8G,IAAI,CAAExG,KAAK,IAAKA,KAAK,CAACG,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;AACrE;;AAEA;AACF;AACA;AACA;AACA;AACA;AACEsG,EAAAA,WAAWA,CAACtG,EAAE,EAAEiF,OAAO,EAAE;AACvB,IAAA,MAAMnB,KAAK,GAAG,IAAI,CAACxE,OAAO,CAACC,MAAM,CAACgH,SAAS,CAAE1G,KAAK,IAAKA,KAAK,CAACG,EAAE,KAAKA,EAAE,CAAC;AAEvE,IAAA,IAAI8D,KAAK,KAAK,EAAE,EAAE;AAChB,MAAA,MAAM,IAAIpE,KAAK,CAAC,CAAkBM,eAAAA,EAAAA,EAAE,aAAa,CAAC;AACpD;;AAEA;IACA,MAAMwG,YAAY,GAAG,IAAI,CAAClH,OAAO,CAACC,MAAM,CAACuE,KAAK,CAAC;AAC/C,IAAA,MAAM2C,YAAY,GAAG;AAAE,MAAA,GAAGD,YAAY;MAAE,GAAGvB;KAAS;;AAEpD;AACA,IAAA,MAAMpF,KAAK,GAAG,IAAIyE,KAAK,CAACmC,YAAY,CAAC;;AAErC;AACA,IAAA,IAAI,CAACnH,OAAO,CAACC,MAAM,CAACuE,KAAK,CAAC,GAAGjE,KAAK,CAACsF,MAAM,EAAE;AAE3C,IAAA,OAAO,IAAI,CAAC7F,OAAO,CAACC,MAAM,CAACuE,KAAK,CAAC;AACnC;;AAEA;AACF;AACA;AACA;AACA;EACE4C,WAAWA,CAAC1G,EAAE,EAAE;AACd,IAAA,MAAM8D,KAAK,GAAG,IAAI,CAACxE,OAAO,CAACC,MAAM,CAACgH,SAAS,CAAE1G,KAAK,IAAKA,KAAK,CAACG,EAAE,KAAKA,EAAE,CAAC;AAEvE,IAAA,IAAI8D,KAAK,KAAK,EAAE,EAAE;AAChB,MAAA,OAAO,KAAK;AACd;IAEA,IAAI,CAACxE,OAAO,CAACC,MAAM,CAAC6G,MAAM,CAACtC,KAAK,EAAE,CAAC,CAAC;AACpC,IAAA,OAAO,IAAI;AACb;;AAEA;AACF;AACA;AACA;AACA;AACA;AACE6C,EAAAA,SAASA,CAAC3G,EAAE,EAAE4G,WAAW,EAAE;AACzB,IAAA,MAAM9C,KAAK,GAAG,IAAI,CAACxE,OAAO,CAACC,MAAM,CAACgH,SAAS,CAAE1G,KAAK,IAAKA,KAAK,CAACG,EAAE,KAAKA,EAAE,CAAC;AAEvE,IAAA,IAAI8D,KAAK,KAAK,EAAE,EAAE;AAChB,MAAA,OAAO,KAAK;AACd;AAEA,IAAA,IAAI8C,WAAW,GAAG,CAAC,IAAIA,WAAW,IAAI,IAAI,CAACtH,OAAO,CAACC,MAAM,CAAC4D,MAAM,EAAE;AAChE,MAAA,MAAM,IAAIzD,KAAK,CAAC,CAAqBkH,kBAAAA,EAAAA,WAAW,EAAE,CAAC;AACrD;;AAEA;AACA,IAAA,MAAM,CAAC/G,KAAK,CAAC,GAAG,IAAI,CAACP,OAAO,CAACC,MAAM,CAAC6G,MAAM,CAACtC,KAAK,EAAE,CAAC,CAAC;;AAEpD;AACA,IAAA,IAAI,CAACxE,OAAO,CAACC,MAAM,CAAC6G,MAAM,CAACQ,WAAW,EAAE,CAAC,EAAE/G,KAAK,CAAC;AAEjD,IAAA,OAAO,IAAI;AACb;;AAEA;AACF;AACA;AACA;AACER,EAAAA,YAAYA,GAAG;AACb,IAAA,OAAOA,YAAY,CAAC,IAAI,CAACC,OAAO,CAAC;AACnC;;AAEA;AACF;AACA;AACA;AACEoD,EAAAA,gBAAgBA,GAAG;AACjB,IAAA,OAAOA,gBAAgB,CAAC,IAAI,CAACpD,OAAO,CAAC;AACvC;;AAEA;AACF;AACA;AACA;AACE6F,EAAAA,MAAMA,GAAG;IACP,OAAO;MAAE7F,OAAO,EAAE,IAAI,CAACA;KAAS;AAClC;;AAEA;AACF;AACA;AACA;AACEuH,EAAAA,QAAQA,GAAG;AACT,IAAA,OAAO5I,IAAI,CAAC8H,SAAS,CAAC,IAAI,CAACZ,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;AAC/C;;AAEA;AACF;AACA;AACA;AACA;EACE,OAAO2B,QAAQA,CAACC,IAAI,EAAE;AACpB,IAAA,MAAMvC,IAAI,GAAG,OAAOuC,IAAI,KAAK,QAAQ,GAAG9I,IAAI,CAACC,KAAK,CAAC6I,IAAI,CAAC,GAAGA,IAAI;AAE/D,IAAA,IAAI,CAACvC,IAAI,CAAClF,OAAO,EAAE;AACjB,MAAA,MAAM,IAAII,KAAK,CAAC,qDAAqD,CAAC;AACxE;IAEA,OAAO,IAAI4F,gBAAgB,CAAC;AAC1B3F,MAAAA,KAAK,EAAE6E,IAAI,CAAClF,OAAO,CAACK,KAAK;MACzBiD,QAAQ,EAAE4B,IAAI,CAAClF,OAAO,CAACsD,QAAQ,IAAI,EAAE;AACrCrD,MAAAA,MAAM,EAAEiF,IAAI,CAAClF,OAAO,CAACC,MAAM,IAAI;AACjC,KAAC,CAAC;AACJ;AACF;;;;"}