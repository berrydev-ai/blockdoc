{"version":3,"file":"blockdoc.js","sources":["../src/core/block.js","../src/schema-loader.js","../src/utils/sanitize.js","../src/renderers/html.js","../src/renderers/markdown.js","../src/core/document.js","../src/index.js"],"sourcesContent":["/**\n * BlockDoc Block\n *\n * Represents a single content block within a BlockDoc document\n */\n\n// Define allowed block types\nconst ALLOWED_TYPES = [\n  \"text\",\n  \"heading\",\n  \"image\",\n  \"code\",\n  \"list\",\n  \"quote\",\n  \"embed\",\n  \"divider\",\n]\n\n// Define type-specific required properties\nconst TYPE_REQUIREMENTS = {\n  heading: [\"level\"],\n  code: [\"language\"],\n  image: [\"url\", \"alt\"],\n  list: [\"items\", \"listType\"],\n}\n\nexport class Block {\n  /**\n   * Create a new block\n   * @param {Object} data - Block data\n   * @param {string} data.id - Unique identifier\n   * @param {string} data.type - Block type\n   * @param {string} data.content - Block content\n   * @param {Object} [data.properties] - Additional type-specific properties\n   */\n  constructor(data) {\n    if (!data.id) {\n      throw new Error(\"Block ID is required\")\n    }\n\n    if (!data.type || !ALLOWED_TYPES.includes(data.type)) {\n      throw new Error(\n        `Invalid block type: ${\n          data.type\n        }. Allowed types are: ${ALLOWED_TYPES.join(\", \")}`\n      )\n    }\n\n    // Basic properties all blocks have\n    this.id = data.id\n    this.type = data.type\n    this.content = data.content || \"\"\n\n    // Check type-specific required properties\n    const requiredProps = TYPE_REQUIREMENTS[this.type] || []\n    for (const prop of requiredProps) {\n      if (data[prop] === undefined) {\n        throw new Error(\n          `Block of type \"${this.type}\" requires property \"${prop}\"`\n        )\n      }\n      this[prop] = data[prop]\n    }\n\n    // Copy any additional properties\n    Object.keys(data).forEach((key) => {\n      if (![\"id\", \"type\", \"content\"].includes(key) && this[key] === undefined) {\n        this[key] = data[key]\n      }\n    })\n  }\n\n  /**\n   * Update block properties\n   * @param {Object} updates - Properties to update\n   * @returns {Block} Updated block instance\n   */\n  update(updates) {\n    // Cannot change block type or ID\n    const { id, type, ...allowedUpdates } = updates\n\n    // Apply updates\n    Object.keys(allowedUpdates).forEach((key) => {\n      this[key] = allowedUpdates[key]\n    })\n\n    return this\n  }\n\n  /**\n   * Convert block to plain object\n   * @returns {Object} Block as plain object\n   */\n  toJSON() {\n    const result = {\n      id: this.id,\n      type: this.type,\n      content: this.content,\n    }\n\n    // Add type-specific properties\n    Object.keys(this).forEach((key) => {\n      if (![\"id\", \"type\", \"content\"].includes(key)) {\n        result[key] = this[key]\n      }\n    })\n\n    return result\n  }\n\n  /**\n   * Create common block types with simplified APIs\n   */\n\n  /**\n   * Create a text block\n   * @param {string} id - Block ID\n   * @param {string} content - Markdown content\n   * @returns {Block} New block instance\n   */\n  static text(id, content) {\n    return new Block({\n      id,\n      type: \"text\",\n      content,\n    })\n  }\n\n  /**\n   * Create a heading block\n   * @param {string} id - Block ID\n   * @param {number} level - Heading level (1-6)\n   * @param {string} content - Heading text\n   * @returns {Block} New block instance\n   */\n  static heading(id, level, content) {\n    return new Block({\n      id,\n      type: \"heading\",\n      level,\n      content,\n    })\n  }\n\n  /**\n   * Create an image block\n   * @param {string} id - Block ID\n   * @param {string} url - Image URL\n   * @param {string} alt - Alt text\n   * @param {string} [caption] - Optional caption\n   * @returns {Block} New block instance\n   */\n  static image(id, url, alt, caption) {\n    return new Block({\n      id,\n      type: \"image\",\n      content: \"\",\n      url,\n      alt,\n      ...(caption ? { caption } : {}),\n    })\n  }\n\n  /**\n   * Create a code block\n   * @param {string} id - Block ID\n   * @param {string} language - Programming language\n   * @param {string} content - Code content\n   * @returns {Block} New block instance\n   */\n  static code(id, language, content) {\n    return new Block({\n      id,\n      type: \"code\",\n      language,\n      content,\n    })\n  }\n\n  /**\n   * Create a list block\n   * @param {string} id - Block ID\n   * @param {Array<string>} items - List items\n   * @param {string} [listType='unordered'] - List type (ordered or unordered)\n   * @returns {Block} New block instance\n   */\n  static list(id, items, listType = \"unordered\") {\n    return new Block({\n      id,\n      type: \"list\",\n      content: \"\",\n      items,\n      listType,\n    })\n  }\n}\n","/**\n * BlockDoc Schema Loader\n * \n * Loads the JSON schema without requiring import assertions\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get current directory\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Load schema\nconst schemaPath = path.join(__dirname, 'schema/blockdoc.schema.json');\nconst schemaContent = fs.readFileSync(schemaPath, 'utf-8');\nexport const schema = JSON.parse(schemaContent);","/**\n * BlockDoc HTML Sanitization\n * \n * Provides utilities for sanitizing HTML content\n */\n\n/**\n * Simple HTML sanitizer to prevent XSS\n * @param {string} html - HTML content to sanitize\n * @returns {string} Sanitized HTML\n */\nexport function sanitizeHtml(html) {\n  if (!html) return '';\n  \n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n  };\n  \n  return String(html).replace(/[&<>\"']/g, function(m) { return map[m]; });\n}\n\n/**\n * Sanitize a URL for safe embedding\n * @param {string} url - URL to sanitize\n * @returns {string} Sanitized URL\n */\nexport function sanitizeUrl(url) {\n  if (!url) return '';\n  \n  // Only allow http and https protocols\n  if (url.match(/^https?:\\/\\//i)) {\n    return url;\n  } else if (url.startsWith('//')) {\n    return `https:${url}`;\n  } else if (!url.includes(':')) {\n    // Relative URLs are considered safe\n    return url;\n  }\n  \n  // Default to empty for potentially unsafe protocols\n  return '';\n}","/**\n * BlockDoc HTML Renderer\n *\n * Converts BlockDoc documents to HTML\n */\n\nimport { marked } from \"marked\"\nimport { sanitizeHtml } from \"../utils/sanitize.js\"\nimport hljs from \"highlight.js\"\n\n// Configure marked\nmarked.setOptions({\n  highlight: function (code, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      return hljs.highlight(code, { language: lang }).value\n    }\n    return hljs.highlightAuto(code).value\n  },\n  headerIds: true,\n  mangle: false,\n})\n\n/**\n * Render a BlockDoc document to HTML\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} HTML representation\n */\nexport function renderToHTML(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error(\"Invalid article structure\")\n  }\n\n  const html = [\n    `<article class=\"blockdoc-article\">`,\n    `<h1 class=\"blockdoc-title\">${sanitizeHtml(article.title)}</h1>`,\n  ]\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    html.push(renderBlock(block))\n  })\n\n  html.push(\"</article>\")\n\n  return html.join(\"\\n\")\n}\n\n/**\n * Render a single block to HTML\n * @param {Object} block - Block data\n * @returns {string} HTML representation of the block\n */\nfunction renderBlock(block) {\n  const { id, type } = block\n\n  // Wrapper with block ID and type as data attributes\n  const openWrapper = `<div class=\"blockdoc-block blockdoc-${type}\" data-block-id=\"${id}\" data-block-type=\"${type}\">`\n  const closeWrapper = `</div>`\n\n  let content\n\n  switch (type) {\n    case \"text\":\n      content = renderTextBlock(block)\n      break\n    case \"heading\":\n      content = renderHeadingBlock(block)\n      break\n    case \"image\":\n      content = renderImageBlock(block)\n      break\n    case \"code\":\n      content = renderCodeBlock(block)\n      break\n    case \"list\":\n      content = renderListBlock(block)\n      break\n    case \"quote\":\n      content = renderQuoteBlock(block)\n      break\n    case \"embed\":\n      content = renderEmbedBlock(block)\n      break\n    case \"divider\":\n      content = renderDividerBlock()\n      break\n    default:\n      content = `<p>Unknown block type: ${type}</p>`\n  }\n\n  return `${openWrapper}${content}${closeWrapper}`\n}\n\n/**\n * Render a text block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderTextBlock(block) {\n  // Use marked to convert markdown to HTML\n  return marked.parse(block.content)\n}\n\n/**\n * Render a heading block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderHeadingBlock(block) {\n  const { level, content } = block\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6)\n\n  return `<h${validLevel}>${sanitizeHtml(content)}</h${validLevel}>`\n}\n\n/**\n * Render an image block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderImageBlock(block) {\n  const { url, alt, caption } = block\n\n  let html = `<img src=\"${sanitizeHtml(url)}\" alt=\"${sanitizeHtml(\n    alt\n  )}\" class=\"blockdoc-image\" />`\n\n  if (caption) {\n    html += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`\n    return `<figure class=\"blockdoc-figure\">${html}</figure>`\n  }\n\n  return html\n}\n\n/**\n * Render a code block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderCodeBlock(block) {\n  const { language, content } = block\n\n  // Use highlight.js for syntax highlighting\n  let highlightedCode\n\n  try {\n    if (language && hljs.getLanguage(language)) {\n      highlightedCode = hljs.highlight(content, { language }).value\n    } else {\n      highlightedCode = hljs.highlightAuto(content).value\n    }\n  } catch (e) {\n    highlightedCode = sanitizeHtml(content)\n  }\n\n  return `\n    <pre class=\"blockdoc-pre\">\n      <code class=\"blockdoc-code ${\n        language ? `language-${language}` : \"\"\n      }\">${highlightedCode}</code>\n    </pre>\n  `\n}\n\n/**\n * Render a list block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderListBlock(block) {\n  const { items, listType } = block\n\n  if (!items || !Array.isArray(items)) {\n    return \"<p>Invalid list items</p>\"\n  }\n\n  const tag = listType === \"ordered\" ? \"ol\" : \"ul\"\n\n  const itemsHtml = items\n    .map((item) => `<li>${marked.parse(item)}</li>`)\n    .join(\"\")\n\n  return `<${tag} class=\"blockdoc-list blockdoc-list-${listType}\">${itemsHtml}</${tag}>`\n}\n\n/**\n * Render a quote block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderQuoteBlock(block) {\n  const { content, attribution } = block\n\n  let html = `<blockquote class=\"blockdoc-quote\">${marked.parse(\n    content\n  )}</blockquote>`\n\n  if (attribution) {\n    html += `<cite class=\"blockdoc-attribution\">${sanitizeHtml(\n      attribution\n    )}</cite>`\n  }\n\n  return html\n}\n\n/**\n * Render an embed block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderEmbedBlock(block) {\n  const { url, caption, embedType } = block\n\n  let embedHtml\n\n  if (embedType === \"youtube\") {\n    // Extract YouTube video ID\n    const videoId = extractYouTubeId(url)\n    if (videoId) {\n      embedHtml = `\n        <div class=\"blockdoc-embed-container\">\n          <iframe \n            width=\"560\" \n            height=\"315\" \n            src=\"https://www.youtube.com/embed/${videoId}\" \n            frameborder=\"0\" \n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n            allowfullscreen>\n          </iframe>\n        </div>\n      `\n    } else {\n      embedHtml = `<p>Invalid YouTube URL</p>`\n    }\n  } else if (embedType === \"twitter\") {\n    embedHtml = `\n      <div class=\"blockdoc-embed blockdoc-twitter\">\n        <blockquote class=\"twitter-tweet\">\n          <a href=\"${sanitizeHtml(url)}\"></a>\n        </blockquote>\n        <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n      </div>\n    `\n  } else {\n    // Generic embed with iframe\n    embedHtml = `\n      <div class=\"blockdoc-embed\">\n        <iframe \n          src=\"${sanitizeHtml(url)}\" \n          frameborder=\"0\" \n          width=\"100%\" \n          height=\"400\"\n          allowfullscreen>\n        </iframe>\n      </div>\n    `\n  }\n\n  if (caption) {\n    embedHtml += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`\n    return `<figure class=\"blockdoc-figure\">${embedHtml}</figure>`\n  }\n\n  return embedHtml\n}\n\n/**\n * Render a divider block\n * @returns {string} HTML representation\n */\nfunction renderDividerBlock() {\n  return `<hr class=\"blockdoc-divider\" />`\n}\n\n/**\n * Extract YouTube video ID from URL\n * @param {string} url - YouTube URL\n * @returns {string|null} YouTube video ID or null if invalid\n */\nfunction extractYouTubeId(url) {\n  try {\n    const parsedUrl = new URL(url)\n\n    // Handle youtu.be format\n    if (parsedUrl.hostname === \"youtu.be\") {\n      return parsedUrl.pathname.slice(1)\n    }\n\n    // Handle youtube.com format\n    if (\n      parsedUrl.hostname === \"www.youtube.com\" ||\n      parsedUrl.hostname === \"youtube.com\"\n    ) {\n      const params = new URLSearchParams(parsedUrl.search)\n      return params.get(\"v\")\n    }\n\n    return null\n  } catch (e) {\n    return null\n  }\n}\n","/**\n * BlockDoc Markdown Renderer\n *\n * Converts BlockDoc documents to Markdown\n */\n\n/**\n * Render a BlockDoc document to Markdown\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} Markdown representation\n */\nexport function renderToMarkdown(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error(\"Invalid article structure\");\n  }\n\n  const markdown = [\n    `# ${article.title}`,\n    ''\n  ];\n\n  // Add metadata if present\n  if (article.metadata) {\n    if (article.metadata.author) {\n      markdown.push(`> Author: ${article.metadata.author}`);\n    }\n    \n    if (article.metadata.publishedDate) {\n      const date = new Date(article.metadata.publishedDate);\n      markdown.push(`> Published: ${date.toDateString()}`);\n    }\n    \n    if (article.metadata.tags && Array.isArray(article.metadata.tags) && article.metadata.tags.length > 0) {\n      markdown.push(`> Tags: ${article.metadata.tags.join(', ')}`);\n    }\n    \n    markdown.push('');\n  }\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    markdown.push(renderBlockToMarkdown(block));\n    markdown.push(''); // Add a blank line after each block\n  });\n\n  return markdown.join('\\n');\n}\n\n/**\n * Render a single block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation of the block\n */\nfunction renderBlockToMarkdown(block) {\n  const { type } = block;\n\n  switch (type) {\n    case \"text\":\n      return renderTextBlockToMarkdown(block);\n    case \"heading\":\n      return renderHeadingBlockToMarkdown(block);\n    case \"image\":\n      return renderImageBlockToMarkdown(block);\n    case \"code\":\n      return renderCodeBlockToMarkdown(block);\n    case \"list\":\n      return renderListBlockToMarkdown(block);\n    case \"quote\":\n      return renderQuoteBlockToMarkdown(block);\n    case \"embed\":\n      return renderEmbedBlockToMarkdown(block);\n    case \"divider\":\n      return \"---\";\n    default:\n      return `[Unknown block type: ${type}]`;\n  }\n}\n\n/**\n * Render a text block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderTextBlockToMarkdown(block) {\n  // Text content is already in markdown format\n  return block.content;\n}\n\n/**\n * Render a heading block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderHeadingBlockToMarkdown(block) {\n  const { level, content } = block;\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6);\n  const hashtags = '#'.repeat(validLevel);\n  \n  return `${hashtags} ${content}`;\n}\n\n/**\n * Render an image block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderImageBlockToMarkdown(block) {\n  const { url, alt, caption } = block;\n  \n  let markdown = `![${alt || ''}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render a code block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderCodeBlockToMarkdown(block) {\n  const { language, content } = block;\n  \n  return \"```\" + (language || '') + \"\\n\" + content + \"\\n```\";\n}\n\n/**\n * Render a list block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderListBlockToMarkdown(block) {\n  const { items, listType } = block;\n  \n  if (!items || !Array.isArray(items)) {\n    return \"[Invalid list items]\";\n  }\n  \n  return items.map((item, index) => {\n    if (listType === \"ordered\") {\n      return `${index + 1}. ${item}`;\n    } else {\n      return `- ${item}`;\n    }\n  }).join('\\n');\n}\n\n/**\n * Render a quote block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderQuoteBlockToMarkdown(block) {\n  const { content, attribution } = block;\n  \n  let markdown = content.split('\\n').map(line => `> ${line}`).join('\\n');\n  \n  if (attribution) {\n    markdown += `\\n>\\n> \u0014 ${attribution}`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render an embed block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderEmbedBlockToMarkdown(block) {\n  const { url, caption, embedType } = block;\n  \n  let markdown = `[${embedType || 'Embedded content'}: ${url}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}","/**\n * BlockDoc Document\n *\n * Core class for creating, manipulating and rendering BlockDoc documents\n */\n\nimport Ajv from \"ajv\"\nimport addFormats from \"ajv-formats\"\nimport { schema } from \"../schema-loader.js\"\nimport { renderToHTML } from \"../renderers/html.js\"\nimport { renderToMarkdown } from \"../renderers/markdown.js\"\nimport { Block } from \"./block.js\"\n\nexport class BlockDocDocument {\n  /**\n   * Create a new BlockDoc document\n   * @param {Object} options - Document initialization options\n   * @param {string} options.title - Document title\n   * @param {Object} [options.metadata] - Optional document metadata\n   * @param {Array<Object>} [options.blocks] - Initial blocks to add\n   */\n  constructor({ title, metadata = {}, blocks = [] }) {\n    this.article = {\n      title,\n      metadata,\n      blocks: [],\n    }\n\n    // Add initial blocks if provided\n    if (blocks && Array.isArray(blocks)) {\n      blocks.forEach((block) => this.addBlock(block))\n    }\n  }\n\n  /**\n   * Validate the document against the BlockDoc schema\n   * @returns {boolean} True if valid\n   * @throws {Error} If validation fails\n   */\n  validate() {\n    const ajv = new Ajv()\n    addFormats(ajv)\n    const validate = ajv.compile(schema)\n    const valid = validate({ article: this.article })\n\n    if (!valid) {\n      const errors = validate.errors\n      throw new Error(`Invalid BlockDoc document: ${JSON.stringify(errors)}`)\n    }\n\n    return true\n  }\n\n  /**\n   * Add a block to the document\n   * @param {Object} blockData - Block data\n   * @returns {Block} The created block\n   */\n  addBlock(blockData) {\n    // Check if ID already exists\n    if (this.getBlock(blockData.id)) {\n      throw new Error(`Block with ID \"${blockData.id}\" already exists`)\n    }\n\n    const block = new Block(blockData)\n    this.article.blocks.push(block.toJSON())\n    return block\n  }\n\n  /**\n   * Insert a block at a specific position\n   * @param {Object} blockData - Block data\n   * @param {number} position - Position to insert at\n   * @returns {Block} The created block\n   */\n  insertBlock(blockData, position) {\n    // Check if ID already exists\n    if (this.getBlock(blockData.id)) {\n      throw new Error(`Block with ID \"${blockData.id}\" already exists`)\n    }\n\n    const block = new Block(blockData)\n    this.article.blocks.splice(position, 0, block.toJSON())\n    return block\n  }\n\n  /**\n   * Get a block by ID\n   * @param {string} id - Block ID\n   * @returns {Object|null} The block or null if not found\n   */\n  getBlock(id) {\n    return this.article.blocks.find((block) => block.id === id) || null\n  }\n\n  /**\n   * Update a block by ID\n   * @param {string} id - Block ID\n   * @param {Object} updates - Properties to update\n   * @returns {Object} The updated block\n   */\n  updateBlock(id, updates) {\n    const index = this.article.blocks.findIndex((block) => block.id === id)\n\n    if (index === -1) {\n      throw new Error(`Block with ID \"${id}\" not found`)\n    }\n\n    // Create a new block with the updates\n    const currentBlock = this.article.blocks[index]\n    const updatedBlock = { ...currentBlock, ...updates }\n\n    // Validate the updated block\n    const block = new Block(updatedBlock)\n\n    // Update the block in the document\n    this.article.blocks[index] = block.toJSON()\n\n    return this.article.blocks[index]\n  }\n\n  /**\n   * Remove a block by ID\n   * @param {string} id - Block ID\n   * @returns {boolean} True if removed\n   */\n  removeBlock(id) {\n    const index = this.article.blocks.findIndex((block) => block.id === id)\n\n    if (index === -1) {\n      return false\n    }\n\n    this.article.blocks.splice(index, 1)\n    return true\n  }\n\n  /**\n   * Move a block to a new position\n   * @param {string} id - Block ID\n   * @param {number} newPosition - New position\n   * @returns {boolean} True if moved\n   */\n  moveBlock(id, newPosition) {\n    const index = this.article.blocks.findIndex((block) => block.id === id)\n\n    if (index === -1) {\n      return false\n    }\n\n    if (newPosition < 0 || newPosition >= this.article.blocks.length) {\n      throw new Error(`Invalid position: ${newPosition}`)\n    }\n\n    // Remove the block from its current position\n    const [block] = this.article.blocks.splice(index, 1)\n\n    // Insert it at the new position\n    this.article.blocks.splice(newPosition, 0, block)\n\n    return true\n  }\n\n  /**\n   * Render the document to HTML\n   * @returns {string} HTML representation\n   */\n  renderToHTML() {\n    return renderToHTML(this.article)\n  }\n\n  /**\n   * Render the document to Markdown\n   * @returns {string} Markdown representation\n   */\n  renderToMarkdown() {\n    return renderToMarkdown(this.article)\n  }\n\n  /**\n   * Export the document as a JSON object\n   * @returns {Object} Document as JSON object\n   */\n  toJSON() {\n    return { article: this.article }\n  }\n\n  /**\n   * Export the document as a JSON string\n   * @returns {string} Document as JSON string\n   */\n  toString() {\n    return JSON.stringify(this.toJSON(), null, 2)\n  }\n\n  /**\n   * Create a BlockDoc document from a JSON object\n   * @param {Object|string} json - JSON object or string\n   * @returns {BlockDocDocument} New document instance\n   */\n  static fromJSON(json) {\n    const data = typeof json === \"string\" ? JSON.parse(json) : json\n\n    if (!data.article) {\n      throw new Error(\"Invalid BlockDoc document: missing article property\")\n    }\n\n    return new BlockDocDocument({\n      title: data.article.title,\n      metadata: data.article.metadata || {},\n      blocks: data.article.blocks || [],\n    })\n  }\n}\n","/**\n * BlockDoc\n * \n * Main entry point for the BlockDoc library\n */\n\n// Core classes\nexport { Block } from './core/block.js';\nexport { BlockDocDocument } from './core/document.js';\n\n// Renderers\nexport { renderToHTML } from './renderers/html.js';\nexport { renderToMarkdown } from './renderers/markdown.js';\n\n// Schema\nimport { schema } from './schema-loader.js';\nexport { schema };\n\n// Version\nexport const version = '1.0.0';"],"names":["ALLOWED_TYPES","TYPE_REQUIREMENTS","heading","code","image","list","Block","constructor","data","id","Error","type","includes","join","content","requiredProps","prop","undefined","Object","keys","forEach","key","update","updates","allowedUpdates","toJSON","result","text","level","url","alt","caption","language","items","listType","arguments","length","__dirname","path","dirname","fileURLToPath","import","schemaPath","schemaContent","fs","readFileSync","schema","JSON","parse","sanitizeHtml","html","map","String","replace","m","marked","setOptions","highlight","lang","hljs","getLanguage","value","highlightAuto","headerIds","mangle","renderToHTML","article","blocks","Array","isArray","title","block","push","renderBlock","openWrapper","closeWrapper","renderTextBlock","renderHeadingBlock","renderImageBlock","renderCodeBlock","renderListBlock","renderQuoteBlock","renderEmbedBlock","renderDividerBlock","validLevel","Math","min","max","parseInt","highlightedCode","e","tag","itemsHtml","item","attribution","embedType","embedHtml","videoId","extractYouTubeId","parsedUrl","URL","hostname","pathname","slice","params","URLSearchParams","search","get","renderToMarkdown","markdown","metadata","author","publishedDate","date","Date","toDateString","tags","renderBlockToMarkdown","renderTextBlockToMarkdown","renderHeadingBlockToMarkdown","renderImageBlockToMarkdown","renderCodeBlockToMarkdown","renderListBlockToMarkdown","renderQuoteBlockToMarkdown","renderEmbedBlockToMarkdown","hashtags","repeat","index","split","line","BlockDocDocument","_ref","addBlock","validate","ajv","Ajv","addFormats","compile","valid","errors","stringify","blockData","getBlock","insertBlock","position","splice","find","updateBlock","findIndex","currentBlock","updatedBlock","removeBlock","moveBlock","newPosition","toString","fromJSON","json","version"],"mappings":"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"}