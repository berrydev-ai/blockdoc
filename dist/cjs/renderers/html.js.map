{"version":3,"file":"html.js","sources":["../../../src/utils/sanitize.js","../../../src/renderers/html.js"],"sourcesContent":["/**\n * BlockDoc HTML Sanitization\n * \n * Provides utilities for sanitizing HTML content\n */\n\n/**\n * Simple HTML sanitizer to prevent XSS\n * @param {string} html - HTML content to sanitize\n * @returns {string} Sanitized HTML\n */\nexport function sanitizeHtml(html) {\n  if (!html) return '';\n  \n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#039;'\n  };\n  \n  return String(html).replace(/[&<>\"']/g, function(m) { return map[m]; });\n}\n\n/**\n * Sanitize a URL for safe embedding\n * @param {string} url - URL to sanitize\n * @returns {string} Sanitized URL\n */\nexport function sanitizeUrl(url) {\n  if (!url) return '';\n  \n  // Only allow http and https protocols\n  if (url.match(/^https?:\\/\\//i)) {\n    return url;\n  } else if (url.startsWith('//')) {\n    return `https:${url}`;\n  } else if (!url.includes(':')) {\n    // Relative URLs are considered safe\n    return url;\n  }\n  \n  // Default to empty for potentially unsafe protocols\n  return '';\n}","/**\n * BlockDoc HTML Renderer\n *\n * Converts BlockDoc documents to HTML\n */\n\nimport { marked } from 'marked';\nimport { sanitizeHtml } from '../utils/sanitize.js';\nimport hljs from 'highlight.js';\n\n// Configure marked\nmarked.setOptions({\n  highlight: function (code, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      return hljs.highlight(code, { language: lang }).value;\n    }\n    return hljs.highlightAuto(code).value;\n  },\n  headerIds: true,\n  mangle: false,\n});\n\n/**\n * Render a BlockDoc document to HTML\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} HTML representation\n */\nexport function renderToHTML(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error('Invalid article structure');\n  }\n\n  const html = [\n    '<article class=\"blockdoc-article\">',\n    `<h1 class=\"blockdoc-title\">${sanitizeHtml(article.title)}</h1>`,\n  ];\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    html.push(renderBlock(block));\n  });\n\n  html.push('</article>');\n\n  return html.join('\\n');\n}\n\n/**\n * Render a single block to HTML\n * @param {Object} block - Block data\n * @returns {string} HTML representation of the block\n */\nfunction renderBlock(block) {\n  const { id, type } = block;\n\n  // Wrapper with block ID and type as data attributes\n  const openWrapper = `<div class=\"blockdoc-block blockdoc-${type}\" data-block-id=\"${id}\" data-block-type=\"${type}\">`;\n  const closeWrapper = '</div>';\n\n  let content;\n\n  switch (type) {\n  case 'text':\n    content = renderTextBlock(block);\n    break;\n  case 'heading':\n    content = renderHeadingBlock(block);\n    break;\n  case 'image':\n    content = renderImageBlock(block);\n    break;\n  case 'code':\n    content = renderCodeBlock(block);\n    break;\n  case 'list':\n    content = renderListBlock(block);\n    break;\n  case 'quote':\n    content = renderQuoteBlock(block);\n    break;\n  case 'embed':\n    content = renderEmbedBlock(block);\n    break;\n  case 'divider':\n    content = renderDividerBlock();\n    break;\n  default:\n    content = `<p>Unknown block type: ${type}</p>`;\n  }\n\n  return `${openWrapper}${content}${closeWrapper}`;\n}\n\n/**\n * Render a text block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderTextBlock(block) {\n  // Use marked to convert markdown to HTML\n  return marked.parse(block.content);\n}\n\n/**\n * Render a heading block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderHeadingBlock(block) {\n  const { level, content } = block;\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6);\n\n  return `<h${validLevel}>${sanitizeHtml(content)}</h${validLevel}>`;\n}\n\n/**\n * Render an image block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderImageBlock(block) {\n  const { url, alt, caption } = block;\n\n  let html = `<img src=\"${sanitizeHtml(url)}\" alt=\"${sanitizeHtml(\n    alt\n  )}\" class=\"blockdoc-image\" />`;\n\n  if (caption) {\n    html += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`;\n    return `<figure class=\"blockdoc-figure\">${html}</figure>`;\n  }\n\n  return html;\n}\n\n/**\n * Render a code block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderCodeBlock(block) {\n  const { language, content } = block;\n\n  // Use highlight.js for syntax highlighting\n  let highlightedCode;\n\n  try {\n    if (language && hljs.getLanguage(language)) {\n      highlightedCode = hljs.highlight(content, { language }).value;\n    } else {\n      highlightedCode = hljs.highlightAuto(content).value;\n    }\n  } catch (e) {\n    highlightedCode = sanitizeHtml(content);\n  }\n\n  return `\n    <pre class=\"blockdoc-pre\">\n      <code class=\"blockdoc-code ${\n  language ? `language-${language}` : ''\n}\">${highlightedCode}</code>\n    </pre>\n  `;\n}\n\n/**\n * Render a list block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderListBlock(block) {\n  const { items, listType } = block;\n\n  if (!items || !Array.isArray(items)) {\n    return '<p>Invalid list items</p>';\n  }\n\n  const tag = listType === 'ordered' ? 'ol' : 'ul';\n\n  const itemsHtml = items\n    .map((item) => `<li>${marked.parse(item)}</li>`)\n    .join('');\n\n  return `<${tag} class=\"blockdoc-list blockdoc-list-${listType}\">${itemsHtml}</${tag}>`;\n}\n\n/**\n * Render a quote block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderQuoteBlock(block) {\n  const { content, attribution } = block;\n\n  let html = `<blockquote class=\"blockdoc-quote\">${marked.parse(\n    content\n  )}</blockquote>`;\n\n  if (attribution) {\n    html += `<cite class=\"blockdoc-attribution\">${sanitizeHtml(\n      attribution\n    )}</cite>`;\n  }\n\n  return html;\n}\n\n/**\n * Render an embed block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderEmbedBlock(block) {\n  const { url, caption, embedType } = block;\n\n  let embedHtml;\n\n  if (embedType === 'youtube') {\n    // Extract YouTube video ID\n    const videoId = extractYouTubeId(url);\n    if (videoId) {\n      embedHtml = `\n        <div class=\"blockdoc-embed-container\">\n          <iframe \n            width=\"560\" \n            height=\"315\" \n            src=\"https://www.youtube.com/embed/${videoId}\" \n            frameborder=\"0\" \n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n            allowfullscreen>\n          </iframe>\n        </div>\n      `;\n    } else {\n      embedHtml = '<p>Invalid YouTube URL</p>';\n    }\n  } else if (embedType === 'twitter') {\n    embedHtml = `\n      <div class=\"blockdoc-embed blockdoc-twitter\">\n        <blockquote class=\"twitter-tweet\">\n          <a href=\"${sanitizeHtml(url)}\"></a>\n        </blockquote>\n        <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n      </div>\n    `;\n  } else {\n    // Generic embed with iframe\n    embedHtml = `\n      <div class=\"blockdoc-embed\">\n        <iframe \n          src=\"${sanitizeHtml(url)}\" \n          frameborder=\"0\" \n          width=\"100%\" \n          height=\"400\"\n          allowfullscreen>\n        </iframe>\n      </div>\n    `;\n  }\n\n  if (caption) {\n    embedHtml += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`;\n    return `<figure class=\"blockdoc-figure\">${embedHtml}</figure>`;\n  }\n\n  return embedHtml;\n}\n\n/**\n * Render a divider block\n * @returns {string} HTML representation\n */\nfunction renderDividerBlock() {\n  return '<hr class=\"blockdoc-divider\" />';\n}\n\n/**\n * Extract YouTube video ID from URL\n * @param {string} url - YouTube URL\n * @returns {string|null} YouTube video ID or null if invalid\n */\nfunction extractYouTubeId(url) {\n  try {\n    const parsedUrl = new URL(url);\n\n    // Handle youtu.be format\n    if (parsedUrl.hostname === 'youtu.be') {\n      return parsedUrl.pathname.slice(1);\n    }\n\n    // Handle youtube.com format\n    if (\n      parsedUrl.hostname === 'www.youtube.com' ||\n      parsedUrl.hostname === 'youtube.com'\n    ) {\n      const params = new URLSearchParams(parsedUrl.search);\n      return params.get('v');\n    }\n\n    return null;\n  } catch (e) {\n    return null;\n  }\n}\n"],"names":["sanitizeHtml","html","map","String","replace","m","marked","setOptions","highlight","code","lang","hljs","getLanguage","language","value","highlightAuto","headerIds","mangle","renderToHTML","article","blocks","Array","isArray","Error","title","forEach","block","push","renderBlock","join","id","type","openWrapper","closeWrapper","content","renderTextBlock","renderHeadingBlock","renderImageBlock","renderCodeBlock","renderListBlock","renderQuoteBlock","renderEmbedBlock","renderDividerBlock","parse","level","validLevel","Math","min","max","parseInt","url","alt","caption","highlightedCode","e","items","listType","tag","itemsHtml","item","attribution","embedType","embedHtml","videoId","extractYouTubeId","parsedUrl","URL","hostname","pathname","slice","params","URLSearchParams","search","get"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASA,YAAYA,CAACC,IAAI,EAAE;AACjC,EAAA,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;AAEpB,EAAA,MAAMC,GAAG,GAAG;AACV,IAAA,GAAG,EAAE,OAAO;AACZ,IAAA,GAAG,EAAE,MAAM;AACX,IAAA,GAAG,EAAE,MAAM;AACX,IAAA,GAAG,EAAE,QAAQ;AACb,IAAA,IAAI,EAAE;GACP;EAED,OAAOC,MAAM,CAACF,IAAI,CAAC,CAACG,OAAO,CAAC,UAAU,EAAE,UAASC,CAAC,EAAE;IAAE,OAAOH,GAAG,CAACG,CAAC,CAAC;AAAE,GAAC,CAAC;AACzE;;ACvBA;AACA;AACA;AACA;AACA;;;AAMA;AACAC,aAAM,CAACC,UAAU,CAAC;AAChBC,EAAAA,SAAS,EAAE,UAAUC,IAAI,EAAEC,IAAI,EAAE;IAC/B,IAAIA,IAAI,IAAIC,IAAI,CAACC,WAAW,CAACF,IAAI,CAAC,EAAE;AAClC,MAAA,OAAOC,IAAI,CAACH,SAAS,CAACC,IAAI,EAAE;AAAEI,QAAAA,QAAQ,EAAEH;OAAM,CAAC,CAACI,KAAK;AACvD;AACA,IAAA,OAAOH,IAAI,CAACI,aAAa,CAACN,IAAI,CAAC,CAACK,KAAK;GACtC;AACDE,EAAAA,SAAS,EAAE,IAAI;AACfC,EAAAA,MAAM,EAAE;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACO,SAASC,YAAYA,CAACC,OAAO,EAAE;AACpC,EAAA,IAAI,CAACA,OAAO,IAAI,CAACA,OAAO,CAACC,MAAM,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,OAAO,CAACC,MAAM,CAAC,EAAE;AACjE,IAAA,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;AAC9C;AAEA,EAAA,MAAMtB,IAAI,GAAG,CACX,oCAAoC,EACpC,CAAA,2BAAA,EAA8BD,YAAY,CAACmB,OAAO,CAACK,KAAK,CAAC,OAAO,CACjE;;AAED;AACAL,EAAAA,OAAO,CAACC,MAAM,CAACK,OAAO,CAAEC,KAAK,IAAK;AAChCzB,IAAAA,IAAI,CAAC0B,IAAI,CAACC,WAAW,CAACF,KAAK,CAAC,CAAC;AAC/B,GAAC,CAAC;AAEFzB,EAAAA,IAAI,CAAC0B,IAAI,CAAC,YAAY,CAAC;AAEvB,EAAA,OAAO1B,IAAI,CAAC4B,IAAI,CAAC,IAAI,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASD,WAAWA,CAACF,KAAK,EAAE;EAC1B,MAAM;IAAEI,EAAE;AAAEC,IAAAA;AAAK,GAAC,GAAGL,KAAK;;AAE1B;EACA,MAAMM,WAAW,GAAG,CAAuCD,oCAAAA,EAAAA,IAAI,oBAAoBD,EAAE,CAAA,mBAAA,EAAsBC,IAAI,CAAI,EAAA,CAAA;EACnH,MAAME,YAAY,GAAG,QAAQ;AAE7B,EAAA,IAAIC,OAAO;AAEX,EAAA,QAAQH,IAAI;AACZ,IAAA,KAAK,MAAM;AACTG,MAAAA,OAAO,GAAGC,eAAe,CAACT,KAAK,CAAC;AAChC,MAAA;AACF,IAAA,KAAK,SAAS;AACZQ,MAAAA,OAAO,GAAGE,kBAAkB,CAACV,KAAK,CAAC;AACnC,MAAA;AACF,IAAA,KAAK,OAAO;AACVQ,MAAAA,OAAO,GAAGG,gBAAgB,CAACX,KAAK,CAAC;AACjC,MAAA;AACF,IAAA,KAAK,MAAM;AACTQ,MAAAA,OAAO,GAAGI,eAAe,CAACZ,KAAK,CAAC;AAChC,MAAA;AACF,IAAA,KAAK,MAAM;AACTQ,MAAAA,OAAO,GAAGK,eAAe,CAACb,KAAK,CAAC;AAChC,MAAA;AACF,IAAA,KAAK,OAAO;AACVQ,MAAAA,OAAO,GAAGM,gBAAgB,CAACd,KAAK,CAAC;AACjC,MAAA;AACF,IAAA,KAAK,OAAO;AACVQ,MAAAA,OAAO,GAAGO,gBAAgB,CAACf,KAAK,CAAC;AACjC,MAAA;AACF,IAAA,KAAK,SAAS;MACZQ,OAAO,GAAGQ,kBAAkB,EAAE;AAC9B,MAAA;AACF,IAAA;MACER,OAAO,GAAG,CAA0BH,uBAAAA,EAAAA,IAAI,CAAM,IAAA,CAAA;AAChD;AAEA,EAAA,OAAO,GAAGC,WAAW,CAAA,EAAGE,OAAO,CAAA,EAAGD,YAAY,CAAE,CAAA;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,eAAeA,CAACT,KAAK,EAAE;AAC9B;AACA,EAAA,OAAOpB,aAAM,CAACqC,KAAK,CAACjB,KAAK,CAACQ,OAAO,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAACV,KAAK,EAAE;EACjC,MAAM;IAAEkB,KAAK;AAAEV,IAAAA;AAAQ,GAAC,GAAGR,KAAK;EAChC,MAAMmB,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACL,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAEjE,OAAO,CAAA,EAAA,EAAKC,UAAU,CAAI7C,CAAAA,EAAAA,YAAY,CAACkC,OAAO,CAAC,CAAMW,GAAAA,EAAAA,UAAU,CAAG,CAAA,CAAA;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASR,gBAAgBA,CAACX,KAAK,EAAE;EAC/B,MAAM;IAAEwB,GAAG;IAAEC,GAAG;AAAEC,IAAAA;AAAQ,GAAC,GAAG1B,KAAK;AAEnC,EAAA,IAAIzB,IAAI,GAAG,CAAaD,UAAAA,EAAAA,YAAY,CAACkD,GAAG,CAAC,CAAA,OAAA,EAAUlD,YAAY,CAC7DmD,GACF,CAAC,CAA6B,2BAAA,CAAA;AAE9B,EAAA,IAAIC,OAAO,EAAE;AACXnD,IAAAA,IAAI,IAAI,CAAwCD,qCAAAA,EAAAA,YAAY,CAC1DoD,OACF,CAAC,CAAe,aAAA,CAAA;IAChB,OAAO,CAAA,gCAAA,EAAmCnD,IAAI,CAAW,SAAA,CAAA;AAC3D;AAEA,EAAA,OAAOA,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASqC,eAAeA,CAACZ,KAAK,EAAE;EAC9B,MAAM;IAAEb,QAAQ;AAAEqB,IAAAA;AAAQ,GAAC,GAAGR,KAAK;;AAEnC;AACA,EAAA,IAAI2B,eAAe;EAEnB,IAAI;IACF,IAAIxC,QAAQ,IAAIF,IAAI,CAACC,WAAW,CAACC,QAAQ,CAAC,EAAE;AAC1CwC,MAAAA,eAAe,GAAG1C,IAAI,CAACH,SAAS,CAAC0B,OAAO,EAAE;AAAErB,QAAAA;OAAU,CAAC,CAACC,KAAK;AAC/D,KAAC,MAAM;MACLuC,eAAe,GAAG1C,IAAI,CAACI,aAAa,CAACmB,OAAO,CAAC,CAACpB,KAAK;AACrD;GACD,CAAC,OAAOwC,CAAC,EAAE;AACVD,IAAAA,eAAe,GAAGrD,YAAY,CAACkC,OAAO,CAAC;AACzC;EAEA,OAAO;AACT;AACA,iCACErB,EAAAA,QAAQ,GAAG,CAAYA,SAAAA,EAAAA,QAAQ,EAAE,GAAG,EAAE,KACnCwC,eAAe,CAAA;AACpB;AACA,EAAG,CAAA;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASd,eAAeA,CAACb,KAAK,EAAE;EAC9B,MAAM;IAAE6B,KAAK;AAAEC,IAAAA;AAAS,GAAC,GAAG9B,KAAK;EAEjC,IAAI,CAAC6B,KAAK,IAAI,CAAClC,KAAK,CAACC,OAAO,CAACiC,KAAK,CAAC,EAAE;AACnC,IAAA,OAAO,2BAA2B;AACpC;EAEA,MAAME,GAAG,GAAGD,QAAQ,KAAK,SAAS,GAAG,IAAI,GAAG,IAAI;EAEhD,MAAME,SAAS,GAAGH,KAAK,CACpBrD,GAAG,CAAEyD,IAAI,IAAK,CAAOrD,IAAAA,EAAAA,aAAM,CAACqC,KAAK,CAACgB,IAAI,CAAC,CAAA,KAAA,CAAO,CAAC,CAC/C9B,IAAI,CAAC,EAAE,CAAC;EAEX,OAAO,CAAA,CAAA,EAAI4B,GAAG,CAAuCD,oCAAAA,EAAAA,QAAQ,KAAKE,SAAS,CAAA,EAAA,EAAKD,GAAG,CAAG,CAAA,CAAA;AACxF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASjB,gBAAgBA,CAACd,KAAK,EAAE;EAC/B,MAAM;IAAEQ,OAAO;AAAE0B,IAAAA;AAAY,GAAC,GAAGlC,KAAK;EAEtC,IAAIzB,IAAI,GAAG,CAAsCK,mCAAAA,EAAAA,aAAM,CAACqC,KAAK,CAC3DT,OACF,CAAC,CAAe,aAAA,CAAA;AAEhB,EAAA,IAAI0B,WAAW,EAAE;AACf3D,IAAAA,IAAI,IAAI,CAAsCD,mCAAAA,EAAAA,YAAY,CACxD4D,WACF,CAAC,CAAS,OAAA,CAAA;AACZ;AAEA,EAAA,OAAO3D,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASwC,gBAAgBA,CAACf,KAAK,EAAE;EAC/B,MAAM;IAAEwB,GAAG;IAAEE,OAAO;AAAES,IAAAA;AAAU,GAAC,GAAGnC,KAAK;AAEzC,EAAA,IAAIoC,SAAS;EAEb,IAAID,SAAS,KAAK,SAAS,EAAE;AAC3B;AACA,IAAA,MAAME,OAAO,GAAGC,gBAAgB,CAACd,GAAG,CAAC;AACrC,IAAA,IAAIa,OAAO,EAAE;AACXD,MAAAA,SAAS,GAAG;AAClB;AACA;AACA;AACA;AACA,+CAAA,EAAiDC,OAAO,CAAA;AACxD;AACA;AACA;AACA;AACA;AACA,MAAO,CAAA;AACH,KAAC,MAAM;AACLD,MAAAA,SAAS,GAAG,4BAA4B;AAC1C;AACF,GAAC,MAAM,IAAID,SAAS,KAAK,SAAS,EAAE;AAClCC,IAAAA,SAAS,GAAG;AAChB;AACA;AACA,mBAAqB9D,EAAAA,YAAY,CAACkD,GAAG,CAAC,CAAA;AACtC;AACA;AACA;AACA,IAAK,CAAA;AACH,GAAC,MAAM;AACL;AACAY,IAAAA,SAAS,GAAG;AAChB;AACA;AACA,eAAiB9D,EAAAA,YAAY,CAACkD,GAAG,CAAC,CAAA;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,IAAK,CAAA;AACH;AAEA,EAAA,IAAIE,OAAO,EAAE;AACXU,IAAAA,SAAS,IAAI,CAAwC9D,qCAAAA,EAAAA,YAAY,CAC/DoD,OACF,CAAC,CAAe,aAAA,CAAA;IAChB,OAAO,CAAA,gCAAA,EAAmCU,SAAS,CAAW,SAAA,CAAA;AAChE;AAEA,EAAA,OAAOA,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA,SAASpB,kBAAkBA,GAAG;AAC5B,EAAA,OAAO,iCAAiC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASsB,gBAAgBA,CAACd,GAAG,EAAE;EAC7B,IAAI;AACF,IAAA,MAAMe,SAAS,GAAG,IAAIC,GAAG,CAAChB,GAAG,CAAC;;AAE9B;AACA,IAAA,IAAIe,SAAS,CAACE,QAAQ,KAAK,UAAU,EAAE;AACrC,MAAA,OAAOF,SAAS,CAACG,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;AACpC;;AAEA;IACA,IACEJ,SAAS,CAACE,QAAQ,KAAK,iBAAiB,IACxCF,SAAS,CAACE,QAAQ,KAAK,aAAa,EACpC;MACA,MAAMG,MAAM,GAAG,IAAIC,eAAe,CAACN,SAAS,CAACO,MAAM,CAAC;AACpD,MAAA,OAAOF,MAAM,CAACG,GAAG,CAAC,GAAG,CAAC;AACxB;AAEA,IAAA,OAAO,IAAI;GACZ,CAAC,OAAOnB,CAAC,EAAE;AACV,IAAA,OAAO,IAAI;AACb;AACF;;;;"}