{"version":3,"file":"index.js","sources":["../../src/core/block.js","../../src/schema-loader.js","../../src/utils/sanitize.js","../../src/renderers/html.js","../../src/renderers/markdown.js","../../src/core/document.js","../../src/index.js"],"sourcesContent":["/**\n * BlockDoc Block\n *\n * Represents a single content block within a BlockDoc document\n */\n\n// Define allowed block types\nconst ALLOWED_TYPES = [\n  \"text\",\n  \"heading\",\n  \"image\",\n  \"code\",\n  \"list\",\n  \"quote\",\n  \"embed\",\n  \"divider\",\n]\n\n// Define type-specific required properties\nconst TYPE_REQUIREMENTS = {\n  heading: [\"level\"],\n  code: [\"language\"],\n  image: [\"url\", \"alt\"],\n  list: [\"items\", \"listType\"],\n}\n\nexport class Block {\n  /**\n   * Create a new block\n   * @param {Object} data - Block data\n   * @param {string} data.id - Unique identifier\n   * @param {string} data.type - Block type\n   * @param {string} data.content - Block content\n   * @param {Object} [data.properties] - Additional type-specific properties\n   */\n  constructor(data) {\n    if (!data.id) {\n      throw new Error(\"Block ID is required\")\n    }\n\n    if (!data.type || !ALLOWED_TYPES.includes(data.type)) {\n      throw new Error(\n        `Invalid block type: ${\n          data.type\n        }. Allowed types are: ${ALLOWED_TYPES.join(\", \")}`\n      )\n    }\n\n    // Basic properties all blocks have\n    this.id = data.id\n    this.type = data.type\n    this.content = data.content || \"\"\n\n    // Check type-specific required properties\n    const requiredProps = TYPE_REQUIREMENTS[this.type] || []\n    for (const prop of requiredProps) {\n      if (data[prop] === undefined) {\n        throw new Error(\n          `Block of type \"${this.type}\" requires property \"${prop}\"`\n        )\n      }\n      this[prop] = data[prop]\n    }\n\n    // Copy any additional properties\n    Object.keys(data).forEach((key) => {\n      if (![\"id\", \"type\", \"content\"].includes(key) && this[key] === undefined) {\n        this[key] = data[key]\n      }\n    })\n  }\n\n  /**\n   * Update block properties\n   * @param {Object} updates - Properties to update\n   * @returns {Block} Updated block instance\n   */\n  update(updates) {\n    // Cannot change block type or ID\n    const { id, type, ...allowedUpdates } = updates\n\n    // Apply updates\n    Object.keys(allowedUpdates).forEach((key) => {\n      this[key] = allowedUpdates[key]\n    })\n\n    return this\n  }\n\n  /**\n   * Convert block to plain object\n   * @returns {Object} Block as plain object\n   */\n  toJSON() {\n    const result = {\n      id: this.id,\n      type: this.type,\n      content: this.content,\n    }\n\n    // Add type-specific properties\n    Object.keys(this).forEach((key) => {\n      if (![\"id\", \"type\", \"content\"].includes(key)) {\n        result[key] = this[key]\n      }\n    })\n\n    return result\n  }\n\n  /**\n   * Create common block types with simplified APIs\n   */\n\n  /**\n   * Create a text block\n   * @param {string} id - Block ID\n   * @param {string} content - Markdown content\n   * @returns {Block} New block instance\n   */\n  static text(id, content) {\n    return new Block({\n      id,\n      type: \"text\",\n      content,\n    })\n  }\n\n  /**\n   * Create a heading block\n   * @param {string} id - Block ID\n   * @param {number} level - Heading level (1-6)\n   * @param {string} content - Heading text\n   * @returns {Block} New block instance\n   */\n  static heading(id, level, content) {\n    return new Block({\n      id,\n      type: \"heading\",\n      level,\n      content,\n    })\n  }\n\n  /**\n   * Create an image block\n   * @param {string} id - Block ID\n   * @param {string} url - Image URL\n   * @param {string} alt - Alt text\n   * @param {string} [caption] - Optional caption\n   * @returns {Block} New block instance\n   */\n  static image(id, url, alt, caption) {\n    return new Block({\n      id,\n      type: \"image\",\n      content: \"\",\n      url,\n      alt,\n      ...(caption ? { caption } : {}),\n    })\n  }\n\n  /**\n   * Create a code block\n   * @param {string} id - Block ID\n   * @param {string} language - Programming language\n   * @param {string} content - Code content\n   * @returns {Block} New block instance\n   */\n  static code(id, language, content) {\n    return new Block({\n      id,\n      type: \"code\",\n      language,\n      content,\n    })\n  }\n\n  /**\n   * Create a list block\n   * @param {string} id - Block ID\n   * @param {Array<string>} items - List items\n   * @param {string} [listType='unordered'] - List type (ordered or unordered)\n   * @returns {Block} New block instance\n   */\n  static list(id, items, listType = \"unordered\") {\n    return new Block({\n      id,\n      type: \"list\",\n      content: \"\",\n      items,\n      listType,\n    })\n  }\n}\n","/**\n * BlockDoc Schema Loader\n * \n * Loads the JSON schema without requiring import assertions\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get current directory\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Load schema\nconst schemaPath = path.join(__dirname, 'schema/blockdoc.schema.json');\nconst schemaContent = fs.readFileSync(schemaPath, 'utf-8');\nexport const schema = JSON.parse(schemaContent);","/**\n * BlockDoc HTML Sanitization\n * \n * Provides utilities for sanitizing HTML content\n */\n\n/**\n * Simple HTML sanitizer to prevent XSS\n * @param {string} html - HTML content to sanitize\n * @returns {string} Sanitized HTML\n */\nexport function sanitizeHtml(html) {\n  if (!html) return '';\n  \n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n  };\n  \n  return String(html).replace(/[&<>\"']/g, function(m) { return map[m]; });\n}\n\n/**\n * Sanitize a URL for safe embedding\n * @param {string} url - URL to sanitize\n * @returns {string} Sanitized URL\n */\nexport function sanitizeUrl(url) {\n  if (!url) return '';\n  \n  // Only allow http and https protocols\n  if (url.match(/^https?:\\/\\//i)) {\n    return url;\n  } else if (url.startsWith('//')) {\n    return `https:${url}`;\n  } else if (!url.includes(':')) {\n    // Relative URLs are considered safe\n    return url;\n  }\n  \n  // Default to empty for potentially unsafe protocols\n  return '';\n}","/**\n * BlockDoc HTML Renderer\n *\n * Converts BlockDoc documents to HTML\n */\n\nimport { marked } from \"marked\"\nimport { sanitizeHtml } from \"../utils/sanitize.js\"\nimport hljs from \"highlight.js\"\n\n// Configure marked\nmarked.setOptions({\n  highlight: function (code, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      return hljs.highlight(code, { language: lang }).value\n    }\n    return hljs.highlightAuto(code).value\n  },\n  headerIds: true,\n  mangle: false,\n})\n\n/**\n * Render a BlockDoc document to HTML\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} HTML representation\n */\nexport function renderToHTML(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error(\"Invalid article structure\")\n  }\n\n  const html = [\n    `<article class=\"blockdoc-article\">`,\n    `<h1 class=\"blockdoc-title\">${sanitizeHtml(article.title)}</h1>`,\n  ]\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    html.push(renderBlock(block))\n  })\n\n  html.push(\"</article>\")\n\n  return html.join(\"\\n\")\n}\n\n/**\n * Render a single block to HTML\n * @param {Object} block - Block data\n * @returns {string} HTML representation of the block\n */\nfunction renderBlock(block) {\n  const { id, type } = block\n\n  // Wrapper with block ID and type as data attributes\n  const openWrapper = `<div class=\"blockdoc-block blockdoc-${type}\" data-block-id=\"${id}\" data-block-type=\"${type}\">`\n  const closeWrapper = `</div>`\n\n  let content\n\n  switch (type) {\n    case \"text\":\n      content = renderTextBlock(block)\n      break\n    case \"heading\":\n      content = renderHeadingBlock(block)\n      break\n    case \"image\":\n      content = renderImageBlock(block)\n      break\n    case \"code\":\n      content = renderCodeBlock(block)\n      break\n    case \"list\":\n      content = renderListBlock(block)\n      break\n    case \"quote\":\n      content = renderQuoteBlock(block)\n      break\n    case \"embed\":\n      content = renderEmbedBlock(block)\n      break\n    case \"divider\":\n      content = renderDividerBlock()\n      break\n    default:\n      content = `<p>Unknown block type: ${type}</p>`\n  }\n\n  return `${openWrapper}${content}${closeWrapper}`\n}\n\n/**\n * Render a text block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderTextBlock(block) {\n  // Use marked to convert markdown to HTML\n  return marked.parse(block.content)\n}\n\n/**\n * Render a heading block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderHeadingBlock(block) {\n  const { level, content } = block\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6)\n\n  return `<h${validLevel}>${sanitizeHtml(content)}</h${validLevel}>`\n}\n\n/**\n * Render an image block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderImageBlock(block) {\n  const { url, alt, caption } = block\n\n  let html = `<img src=\"${sanitizeHtml(url)}\" alt=\"${sanitizeHtml(\n    alt\n  )}\" class=\"blockdoc-image\" />`\n\n  if (caption) {\n    html += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`\n    return `<figure class=\"blockdoc-figure\">${html}</figure>`\n  }\n\n  return html\n}\n\n/**\n * Render a code block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderCodeBlock(block) {\n  const { language, content } = block\n\n  // Use highlight.js for syntax highlighting\n  let highlightedCode\n\n  try {\n    if (language && hljs.getLanguage(language)) {\n      highlightedCode = hljs.highlight(content, { language }).value\n    } else {\n      highlightedCode = hljs.highlightAuto(content).value\n    }\n  } catch (e) {\n    highlightedCode = sanitizeHtml(content)\n  }\n\n  return `\n    <pre class=\"blockdoc-pre\">\n      <code class=\"blockdoc-code ${\n        language ? `language-${language}` : \"\"\n      }\">${highlightedCode}</code>\n    </pre>\n  `\n}\n\n/**\n * Render a list block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderListBlock(block) {\n  const { items, listType } = block\n\n  if (!items || !Array.isArray(items)) {\n    return \"<p>Invalid list items</p>\"\n  }\n\n  const tag = listType === \"ordered\" ? \"ol\" : \"ul\"\n\n  const itemsHtml = items\n    .map((item) => `<li>${marked.parse(item)}</li>`)\n    .join(\"\")\n\n  return `<${tag} class=\"blockdoc-list blockdoc-list-${listType}\">${itemsHtml}</${tag}>`\n}\n\n/**\n * Render a quote block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderQuoteBlock(block) {\n  const { content, attribution } = block\n\n  let html = `<blockquote class=\"blockdoc-quote\">${marked.parse(\n    content\n  )}</blockquote>`\n\n  if (attribution) {\n    html += `<cite class=\"blockdoc-attribution\">${sanitizeHtml(\n      attribution\n    )}</cite>`\n  }\n\n  return html\n}\n\n/**\n * Render an embed block\n * @param {Object} block - Block data\n * @returns {string} HTML representation\n */\nfunction renderEmbedBlock(block) {\n  const { url, caption, embedType } = block\n\n  let embedHtml\n\n  if (embedType === \"youtube\") {\n    // Extract YouTube video ID\n    const videoId = extractYouTubeId(url)\n    if (videoId) {\n      embedHtml = `\n        <div class=\"blockdoc-embed-container\">\n          <iframe \n            width=\"560\" \n            height=\"315\" \n            src=\"https://www.youtube.com/embed/${videoId}\" \n            frameborder=\"0\" \n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n            allowfullscreen>\n          </iframe>\n        </div>\n      `\n    } else {\n      embedHtml = `<p>Invalid YouTube URL</p>`\n    }\n  } else if (embedType === \"twitter\") {\n    embedHtml = `\n      <div class=\"blockdoc-embed blockdoc-twitter\">\n        <blockquote class=\"twitter-tweet\">\n          <a href=\"${sanitizeHtml(url)}\"></a>\n        </blockquote>\n        <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n      </div>\n    `\n  } else {\n    // Generic embed with iframe\n    embedHtml = `\n      <div class=\"blockdoc-embed\">\n        <iframe \n          src=\"${sanitizeHtml(url)}\" \n          frameborder=\"0\" \n          width=\"100%\" \n          height=\"400\"\n          allowfullscreen>\n        </iframe>\n      </div>\n    `\n  }\n\n  if (caption) {\n    embedHtml += `<figcaption class=\"blockdoc-caption\">${sanitizeHtml(\n      caption\n    )}</figcaption>`\n    return `<figure class=\"blockdoc-figure\">${embedHtml}</figure>`\n  }\n\n  return embedHtml\n}\n\n/**\n * Render a divider block\n * @returns {string} HTML representation\n */\nfunction renderDividerBlock() {\n  return `<hr class=\"blockdoc-divider\" />`\n}\n\n/**\n * Extract YouTube video ID from URL\n * @param {string} url - YouTube URL\n * @returns {string|null} YouTube video ID or null if invalid\n */\nfunction extractYouTubeId(url) {\n  try {\n    const parsedUrl = new URL(url)\n\n    // Handle youtu.be format\n    if (parsedUrl.hostname === \"youtu.be\") {\n      return parsedUrl.pathname.slice(1)\n    }\n\n    // Handle youtube.com format\n    if (\n      parsedUrl.hostname === \"www.youtube.com\" ||\n      parsedUrl.hostname === \"youtube.com\"\n    ) {\n      const params = new URLSearchParams(parsedUrl.search)\n      return params.get(\"v\")\n    }\n\n    return null\n  } catch (e) {\n    return null\n  }\n}\n","/**\n * BlockDoc Markdown Renderer\n *\n * Converts BlockDoc documents to Markdown\n */\n\n/**\n * Render a BlockDoc document to Markdown\n * @param {Object} article - The article object from a BlockDoc document\n * @returns {string} Markdown representation\n */\nexport function renderToMarkdown(article) {\n  if (!article || !article.blocks || !Array.isArray(article.blocks)) {\n    throw new Error(\"Invalid article structure\");\n  }\n\n  const markdown = [\n    `# ${article.title}`,\n    ''\n  ];\n\n  // Add metadata if present\n  if (article.metadata) {\n    if (article.metadata.author) {\n      markdown.push(`> Author: ${article.metadata.author}`);\n    }\n    \n    if (article.metadata.publishedDate) {\n      const date = new Date(article.metadata.publishedDate);\n      markdown.push(`> Published: ${date.toDateString()}`);\n    }\n    \n    if (article.metadata.tags && Array.isArray(article.metadata.tags) && article.metadata.tags.length > 0) {\n      markdown.push(`> Tags: ${article.metadata.tags.join(', ')}`);\n    }\n    \n    markdown.push('');\n  }\n\n  // Render each block\n  article.blocks.forEach((block) => {\n    markdown.push(renderBlockToMarkdown(block));\n    markdown.push(''); // Add a blank line after each block\n  });\n\n  return markdown.join('\\n');\n}\n\n/**\n * Render a single block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation of the block\n */\nfunction renderBlockToMarkdown(block) {\n  const { type } = block;\n\n  switch (type) {\n    case \"text\":\n      return renderTextBlockToMarkdown(block);\n    case \"heading\":\n      return renderHeadingBlockToMarkdown(block);\n    case \"image\":\n      return renderImageBlockToMarkdown(block);\n    case \"code\":\n      return renderCodeBlockToMarkdown(block);\n    case \"list\":\n      return renderListBlockToMarkdown(block);\n    case \"quote\":\n      return renderQuoteBlockToMarkdown(block);\n    case \"embed\":\n      return renderEmbedBlockToMarkdown(block);\n    case \"divider\":\n      return \"---\";\n    default:\n      return `[Unknown block type: ${type}]`;\n  }\n}\n\n/**\n * Render a text block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderTextBlockToMarkdown(block) {\n  // Text content is already in markdown format\n  return block.content;\n}\n\n/**\n * Render a heading block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderHeadingBlockToMarkdown(block) {\n  const { level, content } = block;\n  const validLevel = Math.min(Math.max(parseInt(level) || 2, 1), 6);\n  const hashtags = '#'.repeat(validLevel);\n  \n  return `${hashtags} ${content}`;\n}\n\n/**\n * Render an image block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderImageBlockToMarkdown(block) {\n  const { url, alt, caption } = block;\n  \n  let markdown = `![${alt || ''}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render a code block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderCodeBlockToMarkdown(block) {\n  const { language, content } = block;\n  \n  return \"```\" + (language || '') + \"\\n\" + content + \"\\n```\";\n}\n\n/**\n * Render a list block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderListBlockToMarkdown(block) {\n  const { items, listType } = block;\n  \n  if (!items || !Array.isArray(items)) {\n    return \"[Invalid list items]\";\n  }\n  \n  return items.map((item, index) => {\n    if (listType === \"ordered\") {\n      return `${index + 1}. ${item}`;\n    } else {\n      return `- ${item}`;\n    }\n  }).join('\\n');\n}\n\n/**\n * Render a quote block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderQuoteBlockToMarkdown(block) {\n  const { content, attribution } = block;\n  \n  let markdown = content.split('\\n').map(line => `> ${line}`).join('\\n');\n  \n  if (attribution) {\n    markdown += `\\n>\\n> \u0014 ${attribution}`;\n  }\n  \n  return markdown;\n}\n\n/**\n * Render an embed block to Markdown\n * @param {Object} block - Block data\n * @returns {string} Markdown representation\n */\nfunction renderEmbedBlockToMarkdown(block) {\n  const { url, caption, embedType } = block;\n  \n  let markdown = `[${embedType || 'Embedded content'}: ${url}](${url})`;\n  \n  if (caption) {\n    markdown += `\\n*${caption}*`;\n  }\n  \n  return markdown;\n}","/**\n * BlockDoc Document\n *\n * Core class for creating, manipulating and rendering BlockDoc documents\n */\n\nimport Ajv from \"ajv\"\nimport addFormats from \"ajv-formats\"\nimport { schema } from \"../schema-loader.js\"\nimport { renderToHTML } from \"../renderers/html.js\"\nimport { renderToMarkdown } from \"../renderers/markdown.js\"\nimport { Block } from \"./block.js\"\n\nexport class BlockDocDocument {\n  /**\n   * Create a new BlockDoc document\n   * @param {Object} options - Document initialization options\n   * @param {string} options.title - Document title\n   * @param {Object} [options.metadata] - Optional document metadata\n   * @param {Array<Object>} [options.blocks] - Initial blocks to add\n   */\n  constructor({ title, metadata = {}, blocks = [] }) {\n    this.article = {\n      title,\n      metadata,\n      blocks: [],\n    }\n\n    // Add initial blocks if provided\n    if (blocks && Array.isArray(blocks)) {\n      blocks.forEach((block) => this.addBlock(block))\n    }\n  }\n\n  /**\n   * Validate the document against the BlockDoc schema\n   * @returns {boolean} True if valid\n   * @throws {Error} If validation fails\n   */\n  validate() {\n    const ajv = new Ajv()\n    addFormats(ajv)\n    const validate = ajv.compile(schema)\n    const valid = validate({ article: this.article })\n\n    if (!valid) {\n      const errors = validate.errors\n      throw new Error(`Invalid BlockDoc document: ${JSON.stringify(errors)}`)\n    }\n\n    return true\n  }\n\n  /**\n   * Add a block to the document\n   * @param {Object} blockData - Block data\n   * @returns {Block} The created block\n   */\n  addBlock(blockData) {\n    // Check if ID already exists\n    if (this.getBlock(blockData.id)) {\n      throw new Error(`Block with ID \"${blockData.id}\" already exists`)\n    }\n\n    const block = new Block(blockData)\n    this.article.blocks.push(block.toJSON())\n    return block\n  }\n\n  /**\n   * Insert a block at a specific position\n   * @param {Object} blockData - Block data\n   * @param {number} position - Position to insert at\n   * @returns {Block} The created block\n   */\n  insertBlock(blockData, position) {\n    // Check if ID already exists\n    if (this.getBlock(blockData.id)) {\n      throw new Error(`Block with ID \"${blockData.id}\" already exists`)\n    }\n\n    const block = new Block(blockData)\n    this.article.blocks.splice(position, 0, block.toJSON())\n    return block\n  }\n\n  /**\n   * Get a block by ID\n   * @param {string} id - Block ID\n   * @returns {Object|null} The block or null if not found\n   */\n  getBlock(id) {\n    return this.article.blocks.find((block) => block.id === id) || null\n  }\n\n  /**\n   * Update a block by ID\n   * @param {string} id - Block ID\n   * @param {Object} updates - Properties to update\n   * @returns {Object} The updated block\n   */\n  updateBlock(id, updates) {\n    const index = this.article.blocks.findIndex((block) => block.id === id)\n\n    if (index === -1) {\n      throw new Error(`Block with ID \"${id}\" not found`)\n    }\n\n    // Create a new block with the updates\n    const currentBlock = this.article.blocks[index]\n    const updatedBlock = { ...currentBlock, ...updates }\n\n    // Validate the updated block\n    const block = new Block(updatedBlock)\n\n    // Update the block in the document\n    this.article.blocks[index] = block.toJSON()\n\n    return this.article.blocks[index]\n  }\n\n  /**\n   * Remove a block by ID\n   * @param {string} id - Block ID\n   * @returns {boolean} True if removed\n   */\n  removeBlock(id) {\n    const index = this.article.blocks.findIndex((block) => block.id === id)\n\n    if (index === -1) {\n      return false\n    }\n\n    this.article.blocks.splice(index, 1)\n    return true\n  }\n\n  /**\n   * Move a block to a new position\n   * @param {string} id - Block ID\n   * @param {number} newPosition - New position\n   * @returns {boolean} True if moved\n   */\n  moveBlock(id, newPosition) {\n    const index = this.article.blocks.findIndex((block) => block.id === id)\n\n    if (index === -1) {\n      return false\n    }\n\n    if (newPosition < 0 || newPosition >= this.article.blocks.length) {\n      throw new Error(`Invalid position: ${newPosition}`)\n    }\n\n    // Remove the block from its current position\n    const [block] = this.article.blocks.splice(index, 1)\n\n    // Insert it at the new position\n    this.article.blocks.splice(newPosition, 0, block)\n\n    return true\n  }\n\n  /**\n   * Render the document to HTML\n   * @returns {string} HTML representation\n   */\n  renderToHTML() {\n    return renderToHTML(this.article)\n  }\n\n  /**\n   * Render the document to Markdown\n   * @returns {string} Markdown representation\n   */\n  renderToMarkdown() {\n    return renderToMarkdown(this.article)\n  }\n\n  /**\n   * Export the document as a JSON object\n   * @returns {Object} Document as JSON object\n   */\n  toJSON() {\n    return { article: this.article }\n  }\n\n  /**\n   * Export the document as a JSON string\n   * @returns {string} Document as JSON string\n   */\n  toString() {\n    return JSON.stringify(this.toJSON(), null, 2)\n  }\n\n  /**\n   * Create a BlockDoc document from a JSON object\n   * @param {Object|string} json - JSON object or string\n   * @returns {BlockDocDocument} New document instance\n   */\n  static fromJSON(json) {\n    const data = typeof json === \"string\" ? JSON.parse(json) : json\n\n    if (!data.article) {\n      throw new Error(\"Invalid BlockDoc document: missing article property\")\n    }\n\n    return new BlockDocDocument({\n      title: data.article.title,\n      metadata: data.article.metadata || {},\n      blocks: data.article.blocks || [],\n    })\n  }\n}\n","/**\n * BlockDoc\n * \n * Main entry point for the BlockDoc library\n */\n\n// Core classes\nexport { Block } from './core/block.js';\nexport { BlockDocDocument } from './core/document.js';\n\n// Renderers\nexport { renderToHTML } from './renderers/html.js';\nexport { renderToMarkdown } from './renderers/markdown.js';\n\n// Schema\nimport { schema } from './schema-loader.js';\nexport { schema };\n\n// Version\nexport const version = '1.0.0';"],"names":["ALLOWED_TYPES","TYPE_REQUIREMENTS","heading","code","image","list","Block","constructor","data","id","Error","type","includes","join","content","requiredProps","prop","undefined","Object","keys","forEach","key","update","updates","allowedUpdates","toJSON","result","text","level","url","alt","caption","language","items","listType","__dirname","path","dirname","fileURLToPath","import","schemaPath","schemaContent","fs","readFileSync","schema","JSON","parse","sanitizeHtml","html","map","String","replace","m","marked","setOptions","highlight","lang","hljs","getLanguage","value","highlightAuto","headerIds","mangle","renderToHTML","article","blocks","Array","isArray","title","block","push","renderBlock","openWrapper","closeWrapper","renderTextBlock","renderHeadingBlock","renderImageBlock","renderCodeBlock","renderListBlock","renderQuoteBlock","renderEmbedBlock","renderDividerBlock","validLevel","Math","min","max","parseInt","highlightedCode","e","tag","itemsHtml","item","attribution","embedType","embedHtml","videoId","extractYouTubeId","parsedUrl","URL","hostname","pathname","slice","params","URLSearchParams","search","get","renderToMarkdown","markdown","metadata","author","publishedDate","date","Date","toDateString","tags","length","renderBlockToMarkdown","renderTextBlockToMarkdown","renderHeadingBlockToMarkdown","renderImageBlockToMarkdown","renderCodeBlockToMarkdown","renderListBlockToMarkdown","renderQuoteBlockToMarkdown","renderEmbedBlockToMarkdown","hashtags","repeat","index","split","line","BlockDocDocument","addBlock","validate","ajv","Ajv","addFormats","compile","valid","errors","stringify","blockData","getBlock","insertBlock","position","splice","find","updateBlock","findIndex","currentBlock","updatedBlock","removeBlock","moveBlock","newPosition","toString","fromJSON","json","version"],"mappings":"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"}